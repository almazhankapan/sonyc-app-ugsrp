[{"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/index.js":"1","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/App.js":"2","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/reportWebVitals.js":"3","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/Home.js":"4","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/DataCollection.js":"5","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/DataVisualization.js":"6","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/MeetTheTeam.js":"7","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/AboutUgsrp.js":"8","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/ScrollToTop.js":"9","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/VisualizerMenu.js":"10","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/VisualizerAQ.js":"11","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockData.js":"12","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Footer.js":"13","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Header.js":"14","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/Histogram.js":"15","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/BarChart.js":"16","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/BoxPlot.js":"17","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/Correlation.js":"18","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/HeatMap.js":"19","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/AreaChart.js":"20","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/LineGraph.js":"21","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/ScatterPlot.js":"22","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/HeaderLogo.js":"23","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Hamburger.js":"24","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/UxHci.js":"25","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockDataNq.js":"26","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/VisualizerNQ.js":"27","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockDataAq.js":"28","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockdataAQ.js":"29","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Carousel.js":"30","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/CarouselButtons.js":"31","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/LazyImage.js":"32","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/LazyImageContext.js":"33"},{"size":493,"mtime":1628883860000,"results":"34","hashOfConfig":"35"},{"size":2422,"mtime":1629660379233,"results":"36","hashOfConfig":"35"},{"size":356,"mtime":1628883860000,"results":"37","hashOfConfig":"35"},{"size":4617,"mtime":1629856549127,"results":"38","hashOfConfig":"35"},{"size":9697,"mtime":1629857464214,"results":"39","hashOfConfig":"35"},{"size":46545,"mtime":1629857485937,"results":"40","hashOfConfig":"35"},{"size":3149,"mtime":1628883860000,"results":"41","hashOfConfig":"35"},{"size":8828,"mtime":1629856637971,"results":"42","hashOfConfig":"35"},{"size":251,"mtime":1628883860000,"results":"43","hashOfConfig":"35"},{"size":1364,"mtime":1628883860000,"results":"44","hashOfConfig":"35"},{"size":8950,"mtime":1629660569241,"results":"45","hashOfConfig":"35"},{"size":47904,"mtime":1628883860000,"results":"46","hashOfConfig":"35"},{"size":455,"mtime":1629421530065,"results":"47","hashOfConfig":"35"},{"size":1223,"mtime":1628883860000,"results":"48","hashOfConfig":"35"},{"size":1043,"mtime":1628883860000,"results":"49","hashOfConfig":"35"},{"size":1088,"mtime":1628883860000,"results":"50","hashOfConfig":"35"},{"size":1094,"mtime":1628883860000,"results":"51","hashOfConfig":"35"},{"size":316,"mtime":1628883860000,"results":"52","hashOfConfig":"35"},{"size":305,"mtime":1628883860000,"results":"53","hashOfConfig":"35"},{"size":1580,"mtime":1628883860000,"results":"54","hashOfConfig":"35"},{"size":1294,"mtime":1628883860000,"results":"55","hashOfConfig":"35"},{"size":1309,"mtime":1628883860000,"results":"56","hashOfConfig":"35"},{"size":331,"mtime":1628883860000,"results":"57","hashOfConfig":"35"},{"size":1035,"mtime":1629401137996,"results":"58","hashOfConfig":"35"},{"size":6262,"mtime":1629895781113,"results":"59","hashOfConfig":"35"},{"size":120770,"mtime":1629660596696,"results":"60","hashOfConfig":"35"},{"size":8735,"mtime":1629666729416,"results":"61","hashOfConfig":"35"},{"size":20340,"mtime":1629660602650,"results":"62","hashOfConfig":"35"},{"size":20340,"mtime":1629660602650,"results":"63","hashOfConfig":"35"},{"size":2158,"mtime":1629673785538,"results":"64","hashOfConfig":"35"},{"size":1349,"mtime":1629672150135,"results":"65","hashOfConfig":"35"},{"size":528,"mtime":1629672259181,"results":"66","hashOfConfig":"35"},{"size":689,"mtime":1629851934194,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1vj156j",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"70"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/index.js",[],["149","150"],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/App.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/reportWebVitals.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/Home.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/DataCollection.js",["151"],"import React from 'react'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport poster from '../images/poster.png'\nimport './DataCollection.css'\n\nfunction DataCollection() {\n  return (\n    <>\n      <Header />\n      <div className=\"home-ugsrp\">\n        <h2 className=\"header-text\">Sensor Data Collection and Analysis</h2>\n        <div className=\"block\">\n          <p className=\"full-text\">\n            <br />\n            <br />\n            SONYC Air Quality (sonycAQ) Page to preview the code and related\n            docs for the air quality (AQ) aspects of the{' '}\n            <a href=\"https://wp.nyu.edu/sonyc\">\n              Sounds Of New York City Project\n            </a>\n            . The AQ sensor chosen is the{' '}\n            <a href=\"https://www.pierasystems.com/products/piera-7100-intelligent-particle-sensor\">\n              Piera IPS-7100 Intelligent Particle Sensor\n            </a>{' '}\n            which communiactes via UART with the SONYC project's Raspberry Pi 4B\n            based noise sensor.\n            <br /> <br />\n            <figure>\n              <img\n                src={\n                  'https://user-images.githubusercontent.com/86373439/128935455-52568d5b-1691-46e3-8aee-3af3ae30c94b.png'\n                }\n                alt=\"poster gif\"\n                className=\"sensor-img\"\n              />\n              <br />\n              <figlabel>Figure 1. Sensor IPS 7100.</figlabel>\n            </figure>\n          </p>\n        </div>\n        <br />\n        <div className=\"block\">\n          <h4 className=\"gif-text\">Introduction - Why is AQ part of SONYC?</h4>\n          <p className=\"full-text\">\n            {' '}\n            Air pollutants, including particulate matter (PM's), particularly\n            PM2.5, are a significant health concern in urban areas such as New\n            York City. The NYC Department of Health estimates approximately\n            3,000 people die each year due to PM2.5-related illnesses in the\n            city, and approximately 8,000 more hospital visits can be linked to\n            dangerous PM2.5 exposure.\n            <br />\n            <br />\n            <a href=\"https://www1.nyc.gov/assets/doh/downloads/pdf/eode/eode-air-quality-impact.pdf\">\n              Maps\n            </a>{' '}\n            from a study by the Department of Health show that the distribution\n            of PM2.5-related medical incidents is not even across neighborhoods,\n            and is elevated with higher poverty rates. This shows that\n            particulate matter air pollution is a community-based problem, that\n            may have a community-based solution. The following tables from the\n            aforementioned{' '}\n            <a href=\"https://www1.nyc.gov/assets/doh/downloads/pdf/eode/eode-air-quality-impact.pdf\">\n              Department of Health\n            </a>{' '}\n            illustrate the danger of NYC PM2.5 concentrations and showcase the\n            exacerbated risk to communities with high poverty rates. Further\n            figures are available at the source.\n            <br />\n            <br />\n            <figure>\n              <img\n                src={\n                  'https://user-images.githubusercontent.com/86373439/128933800-203ed878-9706-475b-8545-4675aa4cc693.png'\n                }\n                alt=\"poster gif\"\n                className=\"gif-img\"\n              />\n              <br />\n              <figlabel>\n                Figure 2 (above). Health effects from current PM2.5. Image\n                courtesy of the NYC Department of Health and Mental Hygiene.\n              </figlabel>\n            </figure>\n            <br />\n            <br />\n            <figure>\n              <img\n                src={\n                  'https://user-images.githubusercontent.com/86373439/128934092-9049ec9c-7452-40d1-ad3f-a3150b4776e7.png'\n                }\n                alt=\"poster gif\"\n                className=\"gif-img\"\n              />\n              <br />\n              <figlabel>\n                Figure 3 (above). Visualization of PM2.5 attributable\n                respiratory hospitalization rate. Image courtesy of the NYC\n                Department of Health and Mental Hygiene.\n              </figlabel>\n            </figure>\n            <br />\n            <br />\n            SONYC has spent years working with citizen-science based approaches\n            to the issue of noise pollution in New York City, and we are now\n            capable of expanding that infrastructure to examine air pollution.\n            The availablility of reasonably-priced and scalable devices such as\n            the IPS-7100 will allow us to eventually create a wide network of\n            citizen-based collectors of air pollutant levels and air quality in\n            New York City neighborhoods.\n            <br />\n            <br />\n            We are particularly interested in examining air pollution due to the\n            potential correlation between it and noise pollution. Some research\n            into this correlation has been done, but neither in NYC residential\n            settings, nor through a citizen-based initiative. SONYC is in a\n            unique position to leverage existing sound-collecting apparatus and\n            community relationships towards examining this correlation. More\n            data regarding this correlation may lead to better understandings of\n            links between air or noise pollution and certain health conditions,\n            and can help city agencies and community groups to better devote\n            resources to neighborhoods with pollution problems. <br />\n            <br />\n            Additionally, SONYC's existing app for delivering sound data to\n            residents in real time and requesting their qualitative analysis of\n            sound quality can be modified to perform the same functions with air\n            quality. AQ data processed by the new code can be delivered into the\n            app and presented in real time, in a manner suitable for a\n            non-specialist audience. It can also be used as a means for\n            collecting qualitative data, allowing us to link quantitative\n            analysis with qualitative feedback.\n          </p>\n          <br />\n        </div>\n        <br />\n        <div className=\"block\">\n          <h4 className=\"gif-text\">Data Formatting Information </h4>\n          <h5 className=\"gif-text-h5\">Output String Information </h5>\n          <p className=\"full-text\">\n            Output information from the IPS is delivered to the Pi as a string.\n            This string contains the particle count and particle mass for the\n            particle sizes measured by the sensor (PM0.1, PM0.3, PM0.5, PM1.0,\n            PM2.5, PM5.0, and PM10) in the units the sensor is set to. Under\n            default settings, the count is measured in # of particles per liter\n            (#/L), and the mass in micrograms per cubic meter (ug/m^3). Also\n            under default settings, the string terminates with the sensor's\n            serial number and network key.\n            <br />\n          </p>\n          <h5 className=\"gif-text-h5\">Example Unformatted Output String</h5>\n\n          <p className=\"full-text\">\n            <code>\n              PC0.1,###,PC0.3,###,PC0.5,###,PC1.0,###,PC2.5,###,PC5.0,###,PC10,###,PM0.1,\n              #.####,PM0.3, #.####,PM0.5, #.####,PM1.0, #.####,PM2.5,\n              #.####,PM5.0, #.####,PM10, #.####,IPS-S-#########,abcdefg######=\n            </code>\n          </p>\n          <h5 className=\"gif-text-h5\">CSV File Format</h5>\n\n          <p className=\"full-text\">\n            CSV files are generated once every minute, and a reading is taken\n            every second, corresponding to a new row in the current file. Each\n            CSV file is named with the following format:\n            <code>sonycnode-xxxxxxxxxxxx-pm-YYYY_MM_DD-HH_MM_SS.csv</code>. The\n            first line in each file is a header, and all subsequent lines\n            represent one of the measurements, with the first column as the\n            timestamp (in seconds since the beginning of the epoch), and the\n            subsequent columns representing PC0.1 - PC10, and PM0.1 - PM10.\n          </p>\n          <h5 className=\"gif-text-h5\">CSV File Header</h5>\n          <p className=\"full-text\">\n            <code>\n              datetime,PC0.1,PC0.3,PC0.5,PC1.0,PC2.5,PC5.0,PC10,PM0.1,PM0.3,PM0.5,PM1.0,PM2.5,PM5.0,PM10\n            </code>\n          </p>\n          <br />\n        </div>\n        <div className=\"block\">\n          <h4 className=\"gif-text\">Previous Development Stages (Completed) </h4>\n\n          <p className=\"full-text\">\n            1. Wire up sensor to Raspberry Pi via UART and create Python script\n            to read its output <br />\n            <br />\n            2. Parse output string and write to CSV file with a measurment per\n            second <br />\n            <br />\n            3. Create a new CSV file every minute with each containing a header\n            row and a minutes worth of measurements - each file should be named\n            with the following format:\n            <br />\n            <br />\n            <code>sonycnode-xxxxxxxxxxxx-pm-YYYY_MM_DD-HH_MM_SS.csv</code>{' '}\n            <br />\n            <br />\n            4. Collect a few days worth of continuous data from the sensor\n            nearby an open window <br />\n            <br />\n            5. Create a Jupyter Notebook in this repository and plot the data\n            using matplotlib\n          </p>\n        </div>\n        <br /> <br />\n        <br />\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default DataCollection\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/DataVisualization.js",["152"],"import React from 'react'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport lit1 from '../images/lit1.png'\nimport lit2 from '../images/lit2.png'\nimport lit3 from '../images/lit3.png'\nimport lit4 from '../images/lit4.png'\nimport lit5 from '../images/lit5.png'\nimport lit1a from '../images/lit1a.png'\nimport lit2a from '../images/lit2a.png'\nimport bch1 from '../images/bch1.png'\nimport bch2 from '../images/bch2.png'\nimport bch3 from '../images/bch3.png'\nimport lc1 from '../images/lc1.png'\nimport lc2 from '../images/lc2.png'\nimport lc3 from '../images/lc3.png'\nimport ng1 from '../images/ng1.png'\nimport ng2 from '../images/ng2.png'\nimport ng3 from '../images/ng3.png'\nimport rc1 from '../images/rc1.png'\nimport rc2 from '../images/rc2.png'\nimport rc3 from '../images/rc3.png'\nimport rc4 from '../images/rc4.png'\nimport wa1 from '../images/wa1.png'\nimport wa2 from '../images/wa2.png'\nimport wa3 from '../images/wa3.png'\nimport wa4 from '../images/wa4.png'\nimport bc1 from '../images/bc1.png'\nimport bc2 from '../images/bc2.png'\nimport bc3 from '../images/bc3.png'\nimport ReactDOM from 'react-dom'\nimport Carousel from '../components/Carousel'\nimport { LazyImageProvider } from '../components/LazyImageContext'\nimport LazyImage from '../components/LazyImage'\n//import './index.css'\nimport granular from '../images/granular.png'\nimport './DataVisualization.css'\nimport Collapsible from 'react-collapsible'\n\nfunction DataVisualization() {\n  const images = [lc1, lc2, lc3]\n  const imagesRc = [rc1, rc2, rc3, rc4]\n  const imagesNg = [ng1, ng2, ng3]\n  const imagesBg = [bc1, bc2, bc3]\n  const imagesBcg = [bch1, bch2, bch3]\n  const imagesWa = [wa1, wa2, wa3, wa4]\n\n  return (\n    <>\n      <Header />\n      <div className=\"home\">\n        <h2 className=\"header-text\">Data Visualization</h2>\n        <div className=\"block\">\n          <p className=\"full-text\">\n            Sensors are used to measure Air and Noise Pollution levels and\n            visualizing this data is the first and crucial step in interpreting\n            and making decisions about the data. We conducted research to\n            evaluate and review state-of-the-art approaches towards visualizing\n            the Noise and Air sensor data in web and mobile interface, current\n            challenges in visualizing the sensor data.\n          </p>\n          <br />\n        </div>\n        <div className=\"block\">\n          <h4 className=\"gif-text\">Data Visualization Research Review</h4>\n          <div>\n            <p className=\"full-text\">\n              <b>\n                {' '}\n                Guess the Data: Data Work to Understand How People Make Sense of\n                and Use Simple Sensor Data from Homes .Albrecht Kurze, Andreas\n                Bischof, Sören Totzauer, Michael Storz, Maximilian Eibl, Margot\n                Brereton, and Arne Berger. 2020.\n              </b>\n              <i>\n                Proceedings of the 2020 CHI Conference on Human Factors in\n                Computing Systems\n              </i>\n              . Association for Computing Machinery, New York, NY, USA, 1–12.\n              DOI:https://doi.org/10.1145/3313831.3376273\n            </p>\n            <Collapsible trigger=\"Read More\" className=\"full-text\">\n              <p className=\"full-text\">\n                The authors investigate human sensemaking of such sensor data\n                can reveal domestic activities and to achieve that task, develop\n                and field-test the Guess the data method,which enabled people to\n                use and make sense of live data from their homes and to\n                collectively interpret and reflect on anonymized data from the\n                homes in the study. The authors decided to use simple line\n                graphs as data visualizations for temperature, light level,\n                humidity, barometric pressure and movement (accelerometer\n                values). They wanted to undertake very little pre-processing,\n                presenting close to ‘raw’ data, to prevent interpretation bias.\n                Such simple time series graphs are comparable to those used in\n                other cited studies. The findings show how participants\n                reconstruct behavior, both individually and collectively, expose\n                the sensitive personal data of others, and use sensor data as\n                evidence and for lateral surveillance within the household.\n                <br />\n                Visualized sensor data used as evidence and proof: Participants\n                used visualized data to confirm their assumptions about other\n                residents’ behavior, not only retrospectively during discussions\n                but also pro-actively during data collection when they had\n                access to it. For example, a participant corrected the partner’s\n                careless behavior regarding the light in the hallway (figure 3),\n                which he often forgot to turn off. She confronted him with the\n                visualization of the light sensor data, and “he was a little bit\n                shocked” (II.A)\n              </p>\n              <img src={lit1} alt=\"poster gif\" className=\"vis-img\" />\n            </Collapsible>\n            <br />\n          </div>\n\n          <div>\n            <p className=\"full-text\">\n              <br />\n              <b>\n                Nicolas Maisonneuve, Matthias Stevens, Maria E. Niessen, Peter\n                Hanappe, and Luc Steels. 2009. Citizen noise pollution\n                monitoring.\n              </b>\n              In{' '}\n              <i>\n                Proceedings of the 10th Annual International Conference on\n                Digital Government Research: Social Networks: Making Connections\n                between Citizens, Data and Government\n              </i>{' '}\n              (<i>dg.o '09</i>). Digital Government Society of North America,\n              96–103. https://dl.acm.org/doi/10.5555/1556176.1556198\n            </p>\n            <Collapsible trigger=\"Read More\" className=\"full-text\">\n              <p className=\"full-text\">\n                In this paper, authors present a new approach to monitor noise\n                pollution involving citizens who can measure their personal\n                exposure to noise in their everyday environment by using\n                GPS-equipped mobile phones as noise sensors. The geo-localised\n                measures and user-generated meta-data can be automatically sent\n                and shared online with the public to contribute to the\n                collective noise mapping of cities. The prototype called Noise\n                Tube can be found online. This application collects local\n                information from different sensors (noise level, GPS\n                coordinates, time, user input) and sends them to the NoiseTube\n                server which visualizes the noise level data. The server\n                centralises and processes the data sent by the phones.\n                <br />\n                <br />\n                The mobile application contains a real-time signal processing\n                algorithm which measures the loudness level of the microphone\n                recording the environmental sound (at 22500 Hz, 16 bits) over 1\n                second at a chosen interval. On top of the sensing of the\n                loudness a real time visualization is displayed on the phone\n                with the decibels. To add meaning to this value it is associated\n                with a colour that represents the health risk of the current\n                exposure level: less than 70: green (no risk); between 70 and\n                80: yellow (be careful); more than 80: red (risky). See figure 2\n                below.\n                <br />\n                <br />\n                <img src={lit2} alt=\"poster gif\" className=\"vis-img\" />\n                <br />\n                In addition to measured loudness, the app allows to record the\n                source or context of noise, which is not always available but\n                remains important. Especially because the appreciation of sound\n                and loudness is a subjective matter – i.e. the perceived\n                annoyance (or pleasure) does not always correlate with its\n                loudness (see 6.2). Context is recorded through environmental\n                tagging (source of a noise e.g.: cars, aircraft, neighbours and\n                an annoyance rating/tag) and geo-tagging (gps positioning or\n                place tags (such as “home”, “work”, the name of the subway\n                station, ...) Geo-tagging feature we can reconstruct the\n                geo-coordinates afterwards notably for indoor locations (cf.\n                subway noise map in figure 3).\n                <br />\n                <img src={lit3} alt=\"poster gif\" className=\"vis-img\" />\n                <br />\n                <br />\n                Visualizing Noise Maps. Once the measured data is sent to the\n                server, any user can see his own contributions or exposures by\n                going to the NoiseTube website and visualizing them on a map\n                thanks to Google Earth. The collective noise map is also\n                publicly available constructed by aggregating all the shared\n                participants. Each map can show a layer of participants to add\n                context and meaning to the loudness data. The authors also allow\n                users embed this as a web widget into their personal web pages\n                and provide publicly accessible web API to give full access to\n                third parties such scientists or developers can use individual\n                or collective exposure data to create web mash-ups or analyse\n                data for scientific purposes.\n              </p>\n            </Collapsible>\n            <br />\n          </div>\n          <div>\n            <p className=\"full-text\">\n              <br />\n              <b>\n                Silvia Santini, Benedikt Ostermaier, and Andrea Vitaletti. 2008.\n                First experiences using wireless sensor networks for noise\n                pollution monitoring.{' '}\n              </b>\n              In{' '}\n              <i>\n                Proceedings of the workshop on Real-world wireless sensor\n                networks\n              </i>{' '}\n              (<i>REALWSN '08</i>). Association for Computing Machinery, New\n              York, NY, USA, 61–65. DOI:https://doi.org/10.1145/1435473.1435490\n            </p>\n            <Collapsible trigger=\"Read More\" className=\"full-text\">\n              <p className=\"full-text\">\n                The authors focus on the assessment of environmental noise\n                pollution in urban areas and provide a feasibility analysis of\n                wireless sensor networks. They also present a prototype for the\n                collection and logging of noise pollution data based on the\n                Tmote invent prototyping platform, using which they performed\n                indoor and outdoor noise pollution measurements. They also\n                present tinyLAB, a Matlab-based tool developed in the context of\n                this work, which enables real-time acquisition, processing and\n                visualization of data collected in wireless sensor networks.\n                Authors mention that prototyping wireless sensor network\n                applications often requires visualizing the sensor data to\n                quickly identify any malfunctioning. For example, figure 1 shows\n                the responses to these acoustic events of four different nodes,\n                clearly pointing out a misalignment in the measured equivalent\n                noise levels. <br />\n                <br />\n                <img src={lit4} alt=\"poster gif\" className=\"vis-img\" />\n                <br />\n                <br />\n                Additionally, authors mention that current tools often do not\n                provide satisfactory data processing and visualization features\n                and propose using Matlab as it serves scientists in managing,\n                processing and visualizing their data and appears therefore\n                particularly well-suited to be used in the context of wireless\n                sensor networks. Authors develop tinyLAB, a simple framework\n                that allows to receive and send messages from and to a sensor\n                network and to visualize and process data as it comes from the\n                network. tinyLAB is implemented relying solely on the Matlab\n                software suite and offers a simple API to receive and send data.\n              </p>\n            </Collapsible>\n            <br />\n          </div>\n          <div>\n            <p className=\"full-text\">\n              <br />\n              <b>\n                Ann-sofie Gunnarsson, Malinda Rauhala, Anders Henrysson, and\n                Anders Ynnerman. 2006. Visualization of sensor data using mobile\n                phone augmented reality.{' '}\n              </b>\n              In{' '}\n              <i>\n                Proceedings of the 5th IEEE and ACM International Symposium on\n                Mixed and Augmented Reality\n              </i>{' '}\n              (<i>ISMAR '06</i>). IEEE Computer Society, USA, 233–234.\n              DOI:https://doi.org/10.1109/ISMAR.2006.297820\n            </p>\n            <Collapsible trigger=\"Read More\" className=\"full-text\">\n              <p className=\"full-text\">\n                The authors developed a prototype system for visual inspection\n                of hidden structures using a mobile phone wireless ZigBee sensor\n                network. Data collected from an embedded wireless sensor matrix\n                is used to synthesize AR visualizations in real-time. The AR\n                visualization is providing the user with an instant insight\n                concerning the status of the element being augmented. The\n                authors arrange sensors in a grid (e.g. a matrix), which allows\n                to take an approach where individual sensors emerge as pixels in\n                an image when their data is translated into color values. See\n                below an image that shows a mobile application overview.\n                <br />\n                <br />\n                <img src={lit5} alt=\"poster gif\" className=\"vis-img\" />\n                <br /> <br />\n                Authors argue that AR is an ideal way to present such context\n                related visualizations since it eliminates the focus switching\n                between the visualization domain (image) and problem domain\n                (real world). The sensors measure the relative humidity (RH) at\n                the location of the sensor, providing with data from a discrete\n                set of measure points in 3D. The values between the measure\n                points are interpolated creating a continuous visualization\n                which provides the user an overview of the humidity values as\n                well as their distribution. The mobile phone application\n                contains a visualization engine and a communication layer. The\n                interpolation is performed in real time and every time a new\n                sensor value is retrieved from the sensor network the\n                visualization is updated. Two visualization options are\n                implemented, one fully continuous, see Figure below, while the\n                other is composed of small quadratic units, separated using full\n                transparency. Authors believe that the user experiences a better\n                sense of orientation when less background information is covered\n                by the visualization.\n                <br />\n              </p>\n            </Collapsible>\n            <br />\n          </div>\n\n          <div>\n            <p className=\"full-text\">\n              <br />\n              <b>\n                Sapan Tanted, Anshul Agarwal, Shinjan Mitra, Chaitra Bahuman,\n                and Krithi Ramamritham. 2020. Database and Caching Support for\n                Adaptive Visualization of Large Sensor Data.\n              </b>{' '}\n              <br />\n              In{' '}\n              <i>\n                Proceedings of the 7th ACM IKDD CoDS and 25th COMAD( CoDS COMAD\n                2020\n              </i>\n              ). Association for Computing Machinery, New York, NY, USA, 98–106.\n              DOI:https://doi.org/10.1145/3371158.3371170\n            </p>\n            <Collapsible trigger=\"Read More\" className=\"full-text\">\n              <p className=\"full-text\">\n                <br />\n                The authors discuss visualization of large amounts of sensor\n                data ( time series data) and the design, implementation and\n                performance of an aggregation mechanism to faciliate the former\n                task. Authors advise against displaying too many data points on\n                a single screen as it can make the visualization slow, increase\n                network usage and render the interface less informative and\n                cluttered. They note that techniques like filtering, sampling\n                and aggregation are commonly used in visualization systems to\n                reduce the number of data points displayed. Authors state that\n                the existing visualization systems are found to be inadequate in\n                handling the inflow of large volumes of data. They propose a\n                system that combines aggregation and caching techniques to\n                implement a robust solution that helps visualization of large\n                amounts of sensor data. Authors used Grafana as a visualization\n                interface for their experiments since it is a widelyused\n                open-source tool, provides data customization and allows\n                creating dashboards with attractive visualizations. The\n                technique proposed in this paper follows a hybrid approach where\n                aggregation is performed on-demand, and aggregation of future\n                requests is also taken into consideration. Thus, it requires\n                less space for storing the aggregated data, with minimal delays\n                experienced by users. The proposed approach is independent of\n                the visualization tool and databases and integrates well with\n                existing systems. <br />\n                <br />\n                <img src={lit1a} alt=\"poster gif\" className=\"vis-img\" />\n                <br />\n                <br />\n                One sample visualization from the project is the comparison\n                between the power consumption of two labs - as visualizing raw\n                data for one year is not possible, the system aggregates and\n                visualizes the data as shown in Figure 5, which shows the power\n                consumption of appliances (lights and fans) of two labs (lab1 -\n                green, lab2 - orange) in the building for a period of one month.\n                The user can zoom in to the desired section to view lower\n                granularity data, based on the visual inspection of this graph.\n                The visualization interface enables a smooth transition between\n                granularities to provide rich user experience as shown in Figure\n                6.\n                <br />\n                <br />\n                <img src={granular} alt=\"poster gif\" className=\"vis-img\" />\n              </p>\n            </Collapsible>\n            <br />\n          </div>\n          <div>\n            <Collapsible\n              trigger=\"View more Data Visualization Research paper reviews \"\n              className=\"full-text\"\n            >\n              {' '}\n              <div>\n                <p className=\"full-text\">\n                  <br />\n                  <b>\n                    Ivan Logre, Sébastien Mosser, and Michel Riveill. 2015.\n                    Composition challenges for sensor data visualization.\n                  </b>\n                  <br />\n                  In{' '}\n                  <i>\n                    Companion Proceedings of the 14th International Conference\n                    on Modularity\n                  </i>{' '}\n                  (<i>MODULARITY Companion 2015</i>). Association for Computing\n                  Machinery, New York, NY, USA, 25–26.\n                  DOI:https://doi.org/10.1145/2735386.2735927\n                </p>\n                <Collapsible trigger=\"Read More\" className=\"full-text\">\n                  <p className=\"full-text\">\n                    <br />\n                    The paper discusses the visualization dashboards and argues\n                    that the technologies that are used to design and implement\n                    them are poor from the software engineering point of view.\n                    This paper highlights how this domain could benefit from\n                    leveraging separation of concerns and software composition\n                    paradigms to support dashboard design. In particular, the\n                    authors argue that unfortunately, the tools available to\n                    design and implement such dashboards are holistic and do not\n                    take into account the inherent modularity of this domain.\n                    Authors mention that the design and implementation of a\n                    visualization dashboard involves three roles: 1. a\n                    Requirement Engineer (RE); 2. a Data Manager (DM); 3. a\n                    Dashboard Designer (DD). <br />\n                    <br />\n                    According to the authors, to implement a given dashboard,\n                    one can usually use visualization widget libraries, either\n                    professional solutions such as HighChart1 and AmChart2 or\n                    community-based libraries such as D3.JS3 . Then, one will\n                    add HTML5/CSS code to structure the result. However, those\n                    widgets do not allow their integration with a lot of data\n                    format, since the development effort is put on the\n                    interaction aspect instead of the interoperability. In\n                    addition, the huge amount of available widgets (e.g., D3.js\n                    offers 235 widgets on January 2015) increase the difficulty\n                    to select a suitable visualization. There is a lack of\n                    effort in the categorization of those new visualization\n                    capabilities. According to the authors, these last two\n                    points strengthen the difficulty to cooperate with other\n                    domains, considering the gap between the conceptual role of\n                    the RE and the implementation role of the DD, and because of\n                    the incompatible constraints imposed by the chosen libraries\n                    on data format then reduce reusability. <br />\n                    This paper does not aim to describe a solution, but instead\n                    focuses on the challenges triggered by the design of\n                    visualization dashboards, and align them with modular\n                    paradigms such as separation of concerns and software\n                    composition.\n                    <br />\n                    <br />\n                    <img src={granular} alt=\"poster gif\" className=\"vis-img\" />\n                  </p>\n                </Collapsible>\n                <br />\n              </div>\n              <div>\n                <p className=\"full-text\">\n                  <br />\n                  <b>\n                    Felix G. Hamza-Lup, Ionut E. Iacob, and Sushmita Khan. 2019.\n                    Web-enabled Intelligent System for Continuous Sensor Data\n                    Processing and Visualization.\n                  </b>\n                  <br />\n                  In{' '}\n                  <i>\n                    The 24th International Conference on 3D Web Technology\n                  </i>{' '}\n                  (<i>Web3D '19</i>). Association for Computing Machinery, New\n                  York, NY, USA, 1–7.\n                  DOI:https://doi.org/10.1145/3329714.3338127\n                </p>\n                <Collapsible trigger=\"Read More\" className=\"full-text\">\n                  <p className=\"full-text\">\n                    <br />\n                    The authors focus on real-time data processing and 3D\n                    visualization in web-based user interfaces that facilitate\n                    spatial information understanding and sharing. In their\n                    research, they provide a prototype system for near\n                    real-time, continuous X3D-based visualization of processed\n                    sensor data for two significant applications: thermal\n                    monitoring for residential/commercial buildings and nitrogen\n                    cycle monitoring in water beds for aquaponics systems. The\n                    data processing is a three steps process: (i) collect\n                    real-time data from sensors, (ii) process the data, and\n                    (iii) visualize the information as a spatio-temporal matrix.\n                    <br />\n                    <br />\n                    <img src={lit2a} alt=\"poster gif\" className=\"vis-img\" />\n                  </p>\n                </Collapsible>\n                <br />\n              </div>\n              <div>\n                <p className=\"full-text\">\n                  <br />\n                  <b>\n                    Hironobu Takagi, Chieko Asakawa, Kentarou Fukuda, and Junji\n                    Maeda. 2003. Accessibility designer: visualizing usability\n                    for the blind.\n                  </b>\n                  <br />\n                  In{' '}\n                  <i>\n                    Proceedings of the 6th international ACM SIGACCESS\n                    conference on Computers and accessibility\n                  </i>{' '}\n                  (<i>Assets '04</i>). Association for Computing Machinery, New\n                  York, NY, USA, 177–184.\n                  DOI:https://doi.org/10.1145/1028630.1028662\n                </p>\n                <Collapsible trigger=\"Read More\" className=\"full-text\">\n                  <p className=\"full-text\">\n                    <br />\n                    The authors develop Accessibility Designer (aDesigner),\n                    which has capabilities to visualize blind users' usability\n                    by using colors and gradations. The visualization function\n                    allows Web designers to grasp the weak points in their\n                    pages, and to recognize how accessible or inaccessible their\n                    pages are at a glance. This paper provides an extensive\n                    literature review and describes an approach to visualize\n                    blind users' usability followed by an overview of\n                    Accessibility Designer and also report on the evaluations of\n                    real Web sites using Accessibility Designer.\n                  </p>\n                </Collapsible>\n                <br />\n              </div>\n              <div>\n                <p className=\"full-text\">\n                  <br />\n                  <b>\n                    {' '}\n                    Arne Bröring, David Vial, and Thorsten Reitz. 2014.\n                    Processing real-time sensor data streams for 3D web\n                    visualization.{' '}\n                  </b>\n                  <br />\n                  In{' '}\n                  <i>\n                    Proceedings of the 5th ACM SIGSPATIAL International Workshop\n                    on GeoStreaming (IWGS '14\n                  </i>\n                  ). Association for Computing Machinery, New York, NY, USA,\n                  72–80. DOI:https://doi.org/10.1145/2676552.2676556\n                </p>\n                <Collapsible trigger=\"Read More\" className=\"full-text\">\n                  <p className=\"full-text\">\n                    <br />\n                    The data streams produced by sensors often update with high\n                    frequencies, resulting in large data volumes. Being able to\n                    analyze those real-time sensor data streams requires\n                    efficient visualization techniques. The authors explore how\n                    3D visualizations can be used to extend the available\n                    information space. More specifically, they present an\n                    approach for processing real-time sensor data streams to\n                    enable scalable Web-based 3D visualizations. Based on an\n                    event-driven architecture, the key contribution is the\n                    presentation of three processing patterns to optimize\n                    transmission of sensor data streams to 3D Web clients.\n                  </p>\n                </Collapsible>\n                <br />\n              </div>\n              <div>\n                <p className=\"full-text\">\n                  <br />\n                  <b>\n                    Optional, non-academic source: <br />\n                    Miller, Inclusive Design: How to Build Accessible Data\n                    Visualization | Betterment: 2020.\n                    https://www.betterment.com/resources/accessible-data-visualization/.\n                    Accessed: 2021.\n                  </b>\n                  <br />\n                </p>\n                <Collapsible trigger=\"Read More\" className=\"full-text\">\n                  <p className=\"full-text\">\n                    <br />\n                    The author discusses common accessibility rules that\n                    developers should consider when designing a web application.\n                    Although this article is non-academic, it references\n                    official World Wide Web Consortium guidelines on web\n                    accessibility rules.\n                  </p>\n                </Collapsible>\n                <br />\n              </div>\n            </Collapsible>\n          </div>\n        </div>\n        <br /> <br />\n        <div className=\"block\">\n          <h4 className=\"gif-text\">Sensor Data Visualization Challenges </h4>\n          <p className=\"full-text\">\n            Visualizing large amounts of temporal data requires balancing the\n            goals of achieving high performance and interactivity. Given that\n            Air Quality and Noise level data collected at SONYC is longitudinal\n            (data is collected sequentially over time), aggregate visualization\n            requires plotting multiple data points that reference a value at a\n            certain day, hour and in some cases, minute.\n            <br /> <br />\n            However, displaying too many data points on a single screen can make\n            the visualization slow, increase network usage and render the\n            interface less informative and cluttered.\n            <br /> <br />\n            One solution lies in intelligently aggregating the data to higher\n            granularities, so that the number of data points to be visualized is\n            reduced and is easier for the user to interpret. The figure below{' '}\n            <a href=\"https://dl.acm.org/doi/10.1145/3371158.3371170\">\n              (Tanted et al., 2020)\n            </a>{' '}\n            illustrates an example of data visualization at different levels of\n            granularity (minute, hour, day)\n            <br /> <br />\n            <img src={granular} alt=\"poster gif\" className=\"vis-img\" />\n            <br /> <br />\n            For the future research, data processing techniques like filtering,\n            sampling and aggregation can be used in visualization systems to\n            reduce the number of data points displayed. For the current{' '}\n            <a href=\"/visualizer\">Visualizer Interface</a>\n            <br /> we have visualized samples of the Noise and Air Quality data\n            collected by the sensors for the SONYC project.\n          </p>\n          <p className=\"full-text\">- - -</p>\n          <p className=\"full-text\">\n            Moreover, visualizing the longitudinal data such as Air Quality or\n            Noise level data is challenging due to continuity of the data: 24\n            hours form a continuous cycle as the 'day' has no precise start and\n            end. A normal day ends at 11.59pm, but this line is subjective: if\n            we want to show how data changes based on human activity during the\n            night vs day (relevant to Noise Level analysis), the 'end' and\n            'start' can be set differently. <br />\n            <br />\n            For example, some line or bar charts that deal with the 24-hour\n            cycle set 'start' and 'end' at 4am as, generally, at this time most\n            people are sleeping). Picking an arbitrary time to break the data\n            might be an additional challenge as it requires preliminary analysis\n            and knowledge about the data and potential insights it can provide.\n            Learn more about continuity challenge{' '}\n            <a href=\"http://dougmccune.com/blog/2011/04/21/visualizing-cyclical-time-hour-of-day-charts/\">\n              here.\n            </a>\n          </p>\n\n          <br />\n        </div>\n        <br /> <br />\n        <div className=\"block\">\n          <h4 className=\"gif-text\">Visualization Graphs and Discussion </h4>\n          <p className=\"full-text\">\n            We researched and selected graphs that can most effectively\n            visualize the longitudinal sensor data (both Air Quality and Noise\n            level data). Some of these graphs have been already created and\n            incorporated in the Visualizer interface, while other graphs can\n            serve as an inspiration for future researchers at the SONYC lab.\n          </p>\n          <h5 className=\"gif-text-h5-dv\">A. Line graph</h5>\n          <p className=\"full-text\">\n            {' '}\n            <br />- The easiest way to display the longitudinal data. Line\n            Graphs are used to display quantitative values over a continuous\n            interval or time period. A Line Graph is most frequently used to\n            show trends and analyse how the data has changed over time.\n            <br /> - Typically these charts begin at a certain hour (often\n            midnight) and show 24 unique bars or data points, ending at the same\n            time they started. <br />\n            <br />\n          </p>\n          <div className=\"float-container\">\n            <div className=\"float-child\">\n              <p className=\"full-text\">\n                Advantages\n                <br />\n                - Useful for representing continuous data, such as change over\n                time <br />\n                - Allows possible extrapolation of data <br />\n                - Having a line constructed from multiple data points can allow\n                you to make estimates of missing data <br />- Allows comparison\n                of two or more items to see if there is any kind of connection\n                or relationship\n              </p>\n            </div>\n\n            <div className=\"float-child\">\n              <p className=\"full-text\">\n                Disadvantages\n                <br />\n                - Can be difficult to determine exact values at a given point of\n                the graph <br />- Too many lines, or even two lines that have\n                values that are too similar, can make comparing data difficult\n              </p>\n            </div>\n          </div>\n          <br />\n          <br />\n          <br />\n          <br />\n          <LazyImageProvider>\n            <Carousel>\n              {images.map((image, i) => (\n                <LazyImage aspectRatio={[10, 7]} src={image} key={i} />\n              ))}\n            </Carousel>\n          </LazyImageProvider>\n          <br />\n          <h5 className=\"gif-text-h5-dv\">B. Radar chart graph</h5>\n          <p className=\"full-text\">\n            {' '}\n            - Each variable is provided with an axis that starts from the\n            centre. <br />\n            - All axes are arranged radially, with equal distances between each\n            other, while maintaining the same scale between all axes. <br />-\n            Each variable value is plotted along its individual axis and all the\n            variables in a dataset and connected together to form a polygon.\n          </p>\n          <div className=\"float-container\">\n            <div className=\"float-child\">\n              <p className=\"full-text\">\n                Advantages\n                <br />\n                - Useful for seeing which variables have similar values or if\n                there are any outliers amongst each variable. <br />- Useful for\n                seeing which variables are scoring high or low within a dataset,\n                making them ideal for displaying performance.\n              </p>\n            </div>\n            <div className=\"float-child\">\n              <p className=\"full-text\">\n                Disadvantages\n                <br />\n                - Having multiple polygons in one Radar Chart makes it hard to\n                read. Too many variables creates too many axes and can also make\n                the chart hard to read. Radar Charts should be kept simple and\n                number of variables should be limited.\n                <br />- Another flaw with Radar Charts is that they’re not so\n                good for comparing values across each variable. Comparing values\n                all on a single straight axis is much easier.\n              </p>\n            </div>\n          </div>\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <LazyImageProvider>\n            <Carousel>\n              {imagesRc.map((image, i) => (\n                <LazyImage aspectRatio={[10, 7]} src={image} key={i} />\n              ))}\n            </Carousel>\n          </LazyImageProvider>\n          <br />\n          <h5 className=\"gif-text-h5-dv\">C. Nightingale chart graph</h5>\n          <p className=\"full-text\">\n            {' '}\n            - This chart was famously used by statistician and medical reformer,\n            Florence Nightingale to communicate the avoidable deaths of soldiers\n            during the Crimean war.\n            <br />- Nightingale Rose Charts are drawn on a polar coordinate\n            grid. Each category or interval in the data is divided into equal\n            segments on this radial chart. How far each segment extends from the\n            centre of the polar axis depends on the value it represents.\n          </p>\n          <div className=\"float-container\">\n            <div className=\"float-child\">\n              <p className=\"full-text\">\n                Advantages\n                <br />- Each ring from the centre of the polar grid can be used\n                as a scale to plot the segment size and represent a higher\n                value. Therefore, it’s important to notice with Nightingale Rose\n                Charts that it’s the area, rather than the radius of a segment\n                that represents its value.\n              </p>\n            </div>\n            <div className=\"float-child\">\n              <p className=\"full-text\">\n                Disadvantages\n                <br />- The major flaw with Nightingale Rose Charts is that the\n                outer segments are given more emphasis because of their larger\n                area size. This disproportionately represents increases in\n                value.\n              </p>\n            </div>\n          </div>\n          <br />\n          <br />\n          <LazyImageProvider>\n            <Carousel>\n              {imagesNg.map((image, i) => (\n                <LazyImage aspectRatio={[10, 7]} src={image} key={i} />\n              ))}\n            </Carousel>\n          </LazyImageProvider>\n          <br />\n          <h5 className=\"gif-text-h5-dv\">D. Double-time Bar chart</h5>\n          <p className=\"full-text\">\n            {' '}\n            <b>Why to not usual bar chart for time series? </b>\n            <br /> <br />\n            Generally, visualization of time series data using bar charts has\n            the following challenges: <br />\n            <br />\n            <b>The break in the data between 11pm and midnight: </b>\n            <br />\n            <br />\n            -To summarize, the first problem has to do with being able to\n            understand the trends that occur around midnight (where this chart\n            breaks the data). <br /> <br />\n            -This is only problematic when something interesting is happening\n            around midnight (or whenever you choose to have your chart\n            begin/end). <br />\n            <br />\n            <b> The difficulty understanding the context of the time:</b> <br />\n            <br />- The second point about context has to do with the fact that\n            I don’t think about my days as starting at midnight and ending at\n            11:59pm. <br />\n            <br />- A more accurate representation of how I think of my days is\n            that they start sometime when I wake up, usually around 7am, and\n            they are broken up into “day-time” and “night-time”, and they end\n            more or less when I go to sleep. <br />\n            <br />\n            <br />\n            <b>Summary: </b>\n            <br />\n            <br />\n            The simple bar chart doesn’t solve these problems well. It presents\n            a hard break in the data, forcing the viewer to mentally connect the\n            end of the chart with the beginning. And it also forces the viewer\n            to think about the days in the context of midnight – 11pm, which is\n            not the natural categorization system we have for the hours of the\n            day. <br />\n            Therefore, for future research and development, it is suggested to\n            use a double-time bar chart to display the longitudinal sensor data.\n          </p>\n          <LazyImageProvider>\n            <Carousel>\n              {imagesBg.map((image, i) => (\n                <LazyImage aspectRatio={[10, 7]} src={image} key={i} />\n              ))}\n            </Carousel>\n          </LazyImageProvider>\n          <br />\n\n          <br />\n          <h5 className=\"gif-text-h5-dv\">E. Bubble chart graph</h5>\n          <p className=\"full-text\">\n            {' '}\n            -Each point is assigned a label or category . Each plotted point\n            then represents a third variable by the area of its circle. Colors\n            can also be used to distinguish between categories or used to\n            represent an additional data variable.\n            <br /> -Time can be shown either by having it as a variable on one\n            of the axis or by animating the data variables changing over time.\n            <br />\n            -Bubble Charts are typically used to compare and show the\n            relationships between categorised circles, by the use of positioning\n            and proportions. <br />- The overall picture of Bubble Charts can be\n            used to analyse for patterns/correlations.\n          </p>\n          <div className=\"float-container\">\n            <div className=\"float-child\">\n              <p className=\"full-text\">\n                Advantages\n                <br />\n                -Bubble charts allowing to display three variables without using\n                3D graphs. <br /> -Visually, size of the bubbles makes it very\n                easy to make relative comparisons and graph can convey the same\n                information as a line graph\n              </p>\n            </div>\n            <div className=\"float-child\">\n              <p className=\"full-text\">\n                Disadvantages\n                <br />- Too many bubbles can make the chart hard to read, so\n                Bubble Charts have a limited data size capacity.\n                <br />- Due to circle sizes, can be difficult to ascertain\n                actual values; difficult to read and understand; cannot be used\n                to display a lot of data.\n              </p>\n            </div>\n          </div>\n          <br />\n          <br />\n          <br />\n          <LazyImageProvider>\n            <Carousel>\n              {imagesBcg.map((image, i) => (\n                <LazyImage aspectRatio={[10, 7]} src={image} key={i} />\n              ))}\n            </Carousel>\n          </LazyImageProvider>\n        </div>\n        <div className=\"block\">\n          <h4 className=\"gif-text\">Web Accessibility Notes</h4>\n          <p className=\"full-text\">\n            Another part of the Data Visualization Research involved researching\n            Web Accessibility guidelines for web-based visualizations. This step\n            is required for ensuring that current and future visualizations\n            consider a diverse range of visual, physical and other abilities.\n            <br />\n            <br />\n            According to the World Wide Web Consortium, accessibility is\n            essential for developers and organizations that want to create\n            high-quality websites and web tools, and not exclude people from\n            using their products and services.\n            <br />\n            Below you can view a set of slides that include common advice on how\n            to make web visualizations more accessible and accompanying visual\n            examples. These slides are based on the{' '}\n            <a href=\"https://www.betterment.com/resources/accessible-data-visualization/\">\n              Comprehensive Guide to Accessible Data Visualization\n            </a>{' '}\n            that reference the World Wide Web Consortium guidelines.\n          </p>\n          <LazyImageProvider>\n            <Carousel>\n              {imagesWa.map((image, i) => (\n                <LazyImage aspectRatio={[10, 7]} src={image} key={i} />\n              ))}\n            </Carousel>\n          </LazyImageProvider>\n        </div>\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default DataVisualization\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/MeetTheTeam.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/AboutUgsrp.js",["153"],"import React from 'react'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport poster from '../images/poster.png'\nimport airq from '../images/airq.jpg'\nimport { Link } from 'react-router-dom'\n\nimport './AboutUgsrp.css'\n\nfunction AboutUgsrp() {\n  return (\n    <>\n      <Header />\n      <div className=\"home-ugsrp\">\n        <h2 className=\"header-text-ugsrp\">\n          SONYC project at Undergraduate Summer Research Program 2021.\n        </h2>\n        <div className=\"block\">\n          <p className=\"full-text\">\n            <br />\n            <br />\n            NYU Tandon School of Engineering’s Undergraduate Summer Research\n            Program (UGSRP) provides a unique opportunity for NYU Tandon, NYU\n            Abu Dhabi, NYU Shanghai, NYU CAS + Tandon Dual Degree Program, and\n            other select US students to engage in research over the course of\n            the summer semester. Learn more about UGSRP{' '}\n            <a href=\"https://engineering.nyu.edu/research-innovation/student-research/undergraduate-summer-research-program\">\n              here\n            </a>\n            . <br />\n            <br />\n            Students work with their faculty mentors on various research topics\n            while also participating in seminars presented by distinguished\n            administrative and academic personnel. In addition, research\n            presentations and poster sessions are held in which students have\n            the opportunity to present their research to peoples of all\n            disciplines and backgrounds.\n          </p>\n          <br />\n          <p className=\"full-text\">\n            <br />\n            <br />\n            In the Summer of 2021, The Sounds of New York City lab also took\n            part in the UGSRP program where under the supervision of Professor\n            Graham Dove and Professor Oded Nov, students worked on sensor data\n            collection, analysis, visualization and UX, Human Computer\n            Interaction design. Below you can view the poster of the project\n            which is also available at the NYU Tandon web{' '}\n            <a href=\"https://photos.google.com/share/AF1QipP5wgXtnA_SQaLtKfotCmlaSONpKIWKwV8Kv_Ha5NBArBSWs87vRf_2leGrKLGgWQ?key=ZXI4b1IzSzFsbkY5OWVlQlIxbjdKbVZjRmxwZ2ZR\">\n              poster session\n            </a>\n            .\n          </p>\n          <br />\n          <figure>\n            <img src={poster} alt=\"poster gif\" className=\"gif-img-poster\" />\n            <br />\n            <figlabel>\n              Figure 1. SONYC project poster at Undergraduate Summer Research\n              Program 2021\n            </figlabel>\n          </figure>\n        </div>\n        <div className=\"block\">\n          <h4 className=\"gif-text\"> I. Summer Project Objectives </h4>\n          <p className=\"full-text\">\n            {' '}\n            1. Develop an Air Quality (AQ) addendum to the existing Sounds of\n            New York City (SONYC) noise-monitoring infrastructure Research.\n            <br />\n            <br />\n            2.Research and implement new methods for visualizing AQ and sound\n            monitoring data for a non-scientific audience.\n          </p>\n        </div>\n        <div className=\"block\">\n          <h4 className=\"gif-text\"> II. Background Research</h4>\n          <h5 className=\"gif-text-h5\"> Citizen Science</h5>\n          <p className=\"full-text\">\n            {' '}\n            Citizen science is collaborative research done by non-professionals,\n            by and for the community. We believe the best way to effectively\n            assess air pollution in urban NYC neighborhoods is to monitor at the\n            residential level, involving communities impacted by air pollution\n            in data collection, as well as data visualization. Thus, our\n            non-scientific audience will be to appreciate the implications of\n            the data.\n          </p>\n          <h5 className=\"gif-text-h5\">\n            {' '}\n            Air Pollution and Particulate Matter (PM)\n          </h5>\n          <p className=\"full-text\">\n            {' '}\n            Air pollution poses significant health risks to urban populations,\n            notably for the elderly, immigrants, and people of color. Many\n            residents of New York City fall into one or more of these\n            categories, placing them at higher risk for air pollution-related\n            medical issues.\n            <figure>\n              <img src={airq} alt=\"air1\" className=\"gif-img-sm\" />\n              <br />\n              <figlabel>\n                Figure 2. Size comparison for PM particles. Source:{' '}\n                <a href=\"https://www.sciencelearn.org.nz/images/1869-size-comparisons-for-pm-particles\">\n                  Sciencelearn.org\n                </a>\n              </figlabel>\n            </figure>\n            <br />\n            Particulate Matter is all particles ≤ a certain diameter (in μm)\n            within the air, varying in size, composition, and origin; many are\n            hazardous. PM2.5 particularly are linked to adverse health effects.\n          </p>\n          <h5 className=\"gif-text-h5\"> Noise Quality and Air Pollution</h5>\n          <p className=\"full-text\">\n            Research shows a potentially strong correlation between noise and\n            air pollution. Machine learning models show that using the impact of\n            noise pollution as a feature improves accuracy of air pollution\n            level predictions. In contrast with air pollution, noise pollution\n            continues to increase in developed countries and, yet, there are\n            rarely strict limits for community noise levels.\n          </p>\n          <h5 className=\"gif-text-h5\"> Sensor Data Visualization Research</h5>\n          <p className=\"full-text\">\n            Learn more about an overview of state-of-the-art Sensor Data\n            Visualization research methods, tools and challenges on the{' '}\n            <a href=\"/data-visualization\">\n              Data Visualization and Research page.\n            </a>\n          </p>\n        </div>\n        <div className=\"block\">\n          <h4 className=\"gif-text\">III. Methods</h4>\n          <h5 className=\"gif-text-h5\">Data Collection</h5>\n          <p className=\"full-text\">\n            Have an overview of the steps for collecting, processing and\n            analyzing the Air Quality sensor data on the\n            <a href=\"/data-collection\">\n              {' '}\n              Sensor Data Collection and Analysis\n            </a>{' '}\n            page.\n          </p>\n          <h5 className=\"gif-text-h5\">Data Visualization</h5>\n          <p className=\"full-text\">\n            Interact with the graphs that were developed based on earlier{' '}\n            <a id=\"refer\" href=\"/data-visualization\">\n              Sensor Data Visualization research\n            </a>{' '}\n            on the <a href=\"/visualizer\">the Data Visualization Interface</a>{' '}\n            page. The graphs visualize both Air Quality and Noise Level sensor\n            data.\n          </p>\n          <h5 className=\"gif-text-h5\">\n            UX and Human Computer Interaction design\n          </h5>\n          <p className=\"full-text\">\n            Learn about UX and Human Computer Interaction design implementations\n            for the SONYC mobile app on the <a href=\"/hci\">UX and HCI design</a>{' '}\n            page.\n          </p>\n        </div>\n        <div className=\"block\">\n          <h4 className=\"gif-text\">IV. Conclusions</h4>\n          <p className=\"full-text\">\n            At the end of the program, we now have: <br />\n            <br />\n            - Code for reading our sensor values and saving formatted PM data\n            Code for compiling data, and plotting various information we might\n            choose <br />\n            <br />\n            - Sample data runs and sample notebooks that can be used for future\n            reference regarding trends and sensor behavior\n            <br /> <br />\n            - Sample data runs and sample notebooks that can be used for future\n            reference regarding trends and sensor behavior\n            <br />\n            <br /> - React web application that allows public users to select\n            dataset (air quality, noise quality datasets), graph type (e.g.\n            histogram, box plot), and visualize the data <br />\n            <br />\n            <br />\n            - Compilation of current research methods and tools to visualize the\n            sensor data.\n            <br />\n            <br />\n            - Prototype for the AQ extension of the SONYC mobile application\n            <br />\n          </p>\n          <br />\n        </div>\n        <br /> <br />\n        <br />\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default AboutUgsrp\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/ScrollToTop.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/VisualizerMenu.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/VisualizerAQ.js",["154","155","156","157","158","159","160"],"import React from 'react'\n//Important! Below the mock data is imported from the utils folder\nimport { dataAQ } from '../utils/MockDataAq'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport Histogram from './Histogram'\nimport BarChart from './BarChart'\nimport BoxPlot from './BoxPlot'\nimport Correlation from './Correlation'\nimport AreaChart from './AreaChart'\nimport HeatMap from './HeatMap'\nimport LineGraph from './LineGraph'\nimport ScatterPlot from './ScatterPlot'\nimport './Visualizer.css'\n\nimport { useState } from 'react'\n\n//Main component that displays your created graph\n//Components in React can be in the form of functions, classes etc.\n//and consist of both javascript code and html code (html is the return value)\nfunction VisualizerAQ() {\n  const labelDS = 'Select a Dataset'\n  const [database, setDS] = useState('')\n  const datasetNames = ['Air Quality Dataset', 'Noise Quality Dataset']\n  let display = true\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const graphObject = { database }\n    console.log(graphObject)\n  }\n  const dataKeys = Object.keys(dataAQ[0])\n  const [histoXAttr, setHistoXAttr] = useState('ID')\n  //scatter plot attributes\n  const [ScatoXAttr, setScatoXAttr] = useState('ID')\n  const [ScatoYAttr, setScatoYAttr] = useState('ID')\n\n  //box plot attributes\n  const [boxPlotXAttr, setBoxPlotXAttr] = useState('ID')\n  const [boxPlotYAttr, setBoxPlotYAttr] = useState('Time')\n\n  //line graph attributes\n  const [lineGraphXAttr, setlineGraphXAttr] = useState('ID')\n  const [lineGraphYAttr, setlineGraphYAttr] = useState('ID')\n\n  //bar chart attributes\n  const [barChartXAttr, setBarChartXAttr] = useState('ID')\n  const [barChartYAttr, setBarChartYAttr] = useState('ID')\n\n  //area chart attributes\n  const [areaChartXAttr, setAreaChartXAttr] = useState('ID')\n  const [areaChartYAttr, setAreaChartYAttr] = useState('ID')\n\n  //Below is the html code (return value)\n  return (\n    <>\n      <Header />\n      <div className=\"home-graphs\">\n        <h2 className=\"header-text-graphs\">SONYC Visualizer App</h2>\n\n        <div className=\"graph-wrapper\">\n          <div className=\"graph-block\">\n            <p>Histogram</p>\n            <Histogram\n              data={dataAQ}\n              xAxisAttribute={histoXAttr}\n              title={`Histogram Distribution of Noise Level data`}\n            ></Histogram>\n\n            <div>\n              <div>X Axis</div>\n              <div>\n                <select onChange={(e) => setHistoXAttr(e.target.value)}>\n                  {dataKeys.map((key) => (\n                    <option key={key} value={key}>\n                      {key}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Scatter Plot</p>\n            <ScatterPlot\n              data={dataAQ}\n              xAxisAttribute={ScatoXAttr}\n              yAxisAttribute={ScatoYAttr}\n              title={`Scatter Plot Distribution of Noise Level data`}\n            ></ScatterPlot>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setScatoXAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setScatoYAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>BoxPlot</p>\n            <BoxPlot\n              data={dataAQ}\n              xAxisAttribute={boxPlotXAttr}\n              yAxisAttribute={boxPlotYAttr}\n            ></BoxPlot>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setBoxPlotXAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setBoxPlotYAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Line Graph</p>\n            <LineGraph\n              data={dataAQ}\n              xAxisAttribute={lineGraphXAttr}\n              yAxisAttribute={lineGraphYAttr}\n              title={`Line Graph of Noise Level data`}\n            ></LineGraph>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setlineGraphXAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setlineGraphYAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Bar Chart</p>\n            <BarChart\n              data={dataAQ}\n              xAxisAttribute={barChartXAttr}\n              yAxisAttribute={barChartYAttr}\n              title={`Bar Chart of Noise Level data`}\n            ></BarChart>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setBarChartXAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setBarChartYAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Area Chart</p>\n            <AreaChart\n              data={dataAQ}\n              xAxisAttribute={areaChartXAttr}\n              yAxisAttribute={areaChartYAttr}\n              title={`Area Chart of Noise Level data`}\n            ></AreaChart>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setAreaChartXAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setAreaChartYAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default VisualizerAQ\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockData.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Footer.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Header.js",["161","162"],"import React, { useEffect, useState, useRef } from 'react'\nimport 'react-sticky-header/styles.css'\nimport StickyHeader from 'react-sticky-header'\nimport './Header.css'\nimport Hamburger from './Hamburger'\nimport logo from '../images/sonyc-inverted-logo.png'\nimport HeaderLogo from './HeaderLogo'\nimport { AuthContext } from '../App'\n\nconst Header = () => {\n  const { loggedInUser } = React.useContext(AuthContext)\n  const [isSticky, setSticky] = useState(false)\n  const wrapper = useRef(null)\n  const handleScroll = () => {\n    if (wrapper.current) {\n      setSticky(wrapper.current.getBoundingClientRect().top <= 0)\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll)\n    return () => {\n      window.removeEventListener('scroll', () => handleScroll)\n    }\n  }, [])\n\n  return (\n    <div\n      className={`header-root sticky-wrapper${isSticky ? ' sticky' : ''}`}\n      ref={wrapper}>\n      <div className=\"sticky-inner\">\n        <Hamburger\n          pageWrapId={'page-wrap'}\n          outerContainerId={'outer-container'}\n        />\n        <HeaderLogo src={logo} className=\"logo-img\" />\n        <div className=\"login-signup-buttons\"></div>\n      </div>\n    </div>\n  )\n}\n\nexport default Header\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/Histogram.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/BarChart.js",["163","164"],"import React from 'react'\nimport Plot from 'react-plotly.js'\nimport { dataNonGeo } from '../utils/MockData'\n\nconst BarChart = ({ data, xAxisAttribute, yAxisAttribute }) => {\n  let xData = data.map((d) => {\n    if (d[xAxisAttribute] === undefined || d[xAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[xAxisAttribute]\n  })\n\n  let yData = data.map((d) => {\n    if (d[yAxisAttribute] === undefined || d[yAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[yAxisAttribute]\n  })\n\n  var datapoints = {\n    x: xData,\n    y: yData,\n    marker: {\n      size: 12,\n      color: 'rgba(190, 53, 110, 0.5)'\n    },\n    type: 'bar',\n    hovertemplate:\n      '<b>Noise Value</b>: %{y}' +\n      '<br><b>Day</b>: %{x}<br>' +\n      '<extra></extra>'\n  }\n  //accessibility\n  var data = [datapoints]\n\n  let layout = {\n    xaxis: { showgrid: false },\n    yaxis: { showgrid: false },\n    title: 'Scatter Plot of Noise Level data',\n    hoverlabel: { bgcolor: '#FFF' }\n  }\n\n  return (\n    <>\n      <Plot className=\"\" data={data} layout={layout} />\n    </>\n  )\n}\n\nexport default BarChart\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/BoxPlot.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/Correlation.js",["165"],"import React from 'react'\nimport Plot from 'react-plotly.js'\n\nfunction Correlation() {\n  return (\n    <>\n      <div>\n        <h2 className=\"header-text\">Correlation </h2>\n        <div className=\"block\">\n          <p className=\"full-text\">TBH</p>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Correlation\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/HeatMap.js",["166"],"import React from 'react'\nimport Plot from 'react-plotly.js'\n\nfunction HeatMap() {\n  return (\n    <>\n      <div>\n        <h2 className=\"header-text\">Heat Map </h2>\n        <div className=\"block\">\n          <p className=\"full-text\">TBH</p>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default HeatMap\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/AreaChart.js",["167","168"],"import React from 'react'\nimport Plot from 'react-plotly.js'\nimport { dataNonGeo } from '../utils/MockData'\n\nconst AreaChart = ({ data, xAxisAttribute, yAxisAttribute }) => {\n  let xData = data.map((d) => {\n    if (d[xAxisAttribute] === undefined || d[xAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[xAxisAttribute]\n  })\n\n  let yData = data.map((d) => {\n    if (d[yAxisAttribute] === undefined || d[yAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[yAxisAttribute]\n  })\n\n  var datapoints1 = {\n    x: xData,\n    y: yData,\n    marker: {\n      size: 12,\n      color: 'rgb(45, 70, 207)'\n    },\n    fill: 'tozeroy',\n    type: 'scatter',\n\n    hovertemplate:\n      '<b>Noise Value</b>: %{y}' +\n      '<br><b>Day</b>: %{x}<br>' +\n      '<extra></extra>'\n  }\n\n  var datapoints2 = {\n    x: xData,\n    y: yData,\n    marker: {\n      size: 12,\n      color: 'rgb(222, 213, 115)'\n    },\n    fill: 'tonexty',\n\n    type: 'scatter',\n    hovertemplate:\n      '<b>Noise Value</b>: %{y}' +\n      '<br><b>Day</b>: %{x}<br>' +\n      '<extra></extra>'\n  }\n  //accessibility\n  var data = [datapoints1, datapoints2]\n\n  let layout = {\n    margin: {\n      pad: 5\n    },\n    transition: {\n      duration: 500,\n      easing: 'cubic'\n    },\n    frame: {\n      duration: 500\n    },\n    xaxis: { showgrid: true },\n    yaxis: { showgrid: true },\n    line: {\n      width: 0\n    },\n    title: 'Scatter Plot of Noise Level data',\n    hoverlabel: { bgcolor: '#FFF' }\n  }\n\n  return (\n    <>\n      <Plot className=\"\" data={data} layout={layout} />\n    </>\n  )\n}\n\nexport default AreaChart\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/LineGraph.js",["169","170"],"import React from 'react'\nimport Plot from 'react-plotly.js'\nimport { dataNonGeo } from '../utils/MockData'\n\nconst LineGraph = ({ data, xAxisAttribute, yAxisAttribute }) => {\n  let xData = data.map((d) => {\n    if (d[xAxisAttribute] === undefined || d[xAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[xAxisAttribute]\n  })\n\n  let yData = data.map((d) => {\n    if (d[yAxisAttribute] === undefined || d[yAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[yAxisAttribute]\n  })\n\n  var datapoints = {\n    x: xData,\n    y: yData,\n    mode: 'lines',\n    text: [],\n    marker: {\n      size: 12,\n      color: 'rgb(56, 176, 88)'\n    },\n    type: 'scatter',\n    hovertemplate:\n      '<b>Noise Value</b>: %{y}' +\n      '<br><b>Day</b>: %{x}<br>' +\n      '<extra></extra>'\n  }\n  //accessibility\n  var data = [datapoints]\n\n  let layout = {\n    margin: {\n      pad: 5\n    },\n    transition: {\n      duration: 500,\n      easing: 'cubic'\n    },\n    frame: {\n      duration: 500\n    },\n    xaxis: { showgrid: false },\n    yaxis: { showgrid: false },\n    line: {\n      width: 0\n    },\n    title: 'Line Graph of Noise Level data',\n    hoverlabel: { bgcolor: '#FFF' }\n  }\n\n  return (\n    <>\n      <Plot className=\"\" data={data} layout={layout} />\n    </>\n  )\n}\n\nexport default LineGraph\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/ScatterPlot.js",["171","172"],"import React from 'react'\nimport Plot from 'react-plotly.js'\nimport { dataNonGeo } from '../utils/MockData'\n\nconst ScatterPlot = ({ data, xAxisAttribute, yAxisAttribute }) => {\n  let xData = data.map((d) => {\n    if (d[xAxisAttribute] === undefined || d[xAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[xAxisAttribute]\n  })\n\n  let yData = data.map((d) => {\n    if (d[yAxisAttribute] === undefined || d[yAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[yAxisAttribute]\n  })\n\n  var datapoints = {\n    x: xData,\n    y: yData,\n    text: [],\n    mode: 'markers',\n    type: 'scatter',\n    marker: {\n      size: 12,\n      color: 'rgba(190, 53, 110, 0.5)'\n    },\n    hovertemplate:\n      '<b>Noise Value</b>: %{y}' +\n      '<br><b>Day</b>: %{x}<br>' +\n      '<extra></extra>'\n  }\n  //accessibility\n  var data = [datapoints]\n\n  let layout = {\n    margin: {\n      pad: 5\n    },\n    transition: {\n      duration: 500,\n      easing: 'cubic'\n    },\n    frame: {\n      duration: 500\n    },\n    xaxis: { showgrid: false },\n    yaxis: { showgrid: false },\n    line: {\n      width: 0\n    },\n    title: 'Scatter Plot of Noise Level data',\n    hoverlabel: { bgcolor: '#FFF' }\n  }\n\n  return (\n    <>\n      <Plot className=\"\" data={data} layout={layout} />\n    </>\n  )\n}\n\nexport default ScatterPlot\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/HeaderLogo.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Hamburger.js",["173","174"],"import React from 'react'\nimport { slide as Menu } from 'react-burger-menu'\nimport { Link } from 'react-router-dom'\nimport { AuthContext } from '../App'\n\nconst Hamburger = (props) => {\n  const { loggedInUser, setLoggedInUser } = React.useContext(AuthContext)\n  return (\n    <Menu {...props}>\n      <Link to=\"/Home\" id=\"home\" className=\"menu-item\">\n        About SONYC\n      </Link>\n      <Link to=\"/about-ugsrp\" className=\"menu-item\">\n        Undergraduate Summer Research'21\n      </Link>\n      <Link to=\"/data-collection\" className=\"menu-item\">\n        Data Collection and Analysis\n      </Link>\n      <Link to=\"/data-visualization\" className=\"menu-item\">\n        Data Visualization Research\n      </Link>\n      <Link to=\"/visualizer\" className=\"menu-item\">\n        Visualizer Interface\n      </Link>\n      <Link to=\"/hci\" className=\"menu-item\">\n        UX and HCI\n      </Link>\n      <Link to=\"/meet-the-team\" id=\"Meet-the-team\" className=\"menu-item\">\n        About the Team\n      </Link>\n    </Menu>\n  )\n}\nexport default Hamburger\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/UxHci.js",["175","176"],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockDataNq.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/VisualizerNQ.js",["177","178"],"import React from 'react'\n//Important! Below the mock data is imported from the utils folder\nimport { dataNQ } from '../utils/MockDataNq.js'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport Histogram from './Histogram'\nimport BarChart from './BarChart'\nimport BoxPlot from './BoxPlot'\nimport Correlation from './Correlation'\nimport AreaChart from './AreaChart'\nimport HeatMap from './HeatMap'\nimport LineGraph from './LineGraph'\nimport ScatterPlot from './ScatterPlot'\nimport './Visualizer.css'\n\nimport { useState } from 'react'\n\n//Main component that displays your created graph\n//Components in React can be in the form of functions, classes etc.\n//and consist of both javascript code and html code (html is the return value)\nfunction VisualizerNQ() {\n  const dataKeysAq = Object.keys(dataNQ[0])\n  const [histoXAttr, setHistoXAttr] = useState('ID')\n\n  //scatter plot attributes\n  const [ScatoXAttr, setScatoXAttr] = useState('ID')\n  const [ScatoYAttr, setScatoYAttr] = useState('ID')\n\n  //box plot attributes\n  const [boxPlotXAttr, setBoxPlotXAttr] = useState('ID')\n  const [boxPlotYAttr, setBoxPlotYAttr] = useState('Time')\n\n  //line graph attributes\n  const [lineGraphXAttr, setlineGraphXAttr] = useState('ID')\n  const [lineGraphYAttr, setlineGraphYAttr] = useState('ID')\n\n  //bar chart attributes\n  const [barChartXAttr, setBarChartXAttr] = useState('ID')\n  const [barChartYAttr, setBarChartYAttr] = useState('ID')\n\n  //area chart attributes\n  const [areaChartXAttr, setAreaChartXAttr] = useState('ID')\n  const [areaChartYAttr, setAreaChartYAttr] = useState('ID')\n\n  //Below is the html code (return value)\n  return (\n    <>\n      <Header />\n      <div className=\"home-graphs\">\n        <h2 className=\"header-text-graphs\">SONYC Visualizer App</h2>\n\n        <div className=\"graph-wrapper\">\n          <div className=\"graph-block\">\n            <p>Histogram</p>\n            <Histogram\n              data={dataNQ}\n              xAxisAttribute={histoXAttr}\n              title={`Histogram Distribution of Air Quality data`}\n            ></Histogram>\n\n            <div>\n              <div>X Axis</div>\n              <div>\n                <select onChange={(e) => setHistoXAttr(e.target.value)}>\n                  {dataKeysAq.map((key) => (\n                    <option key={key} value={key}>\n                      {key}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Scatter Plot</p>\n            <ScatterPlot\n              data={dataNQ}\n              xAxisAttribute={ScatoXAttr}\n              yAxisAttribute={ScatoYAttr}\n              title={'Scatter Plot of Air Quality Data'}\n            ></ScatterPlot>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setScatoXAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setScatoYAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>BoxPlot</p>\n            <BoxPlot\n              data={dataNQ}\n              xAxisAttribute={boxPlotXAttr}\n              yAxisAttribute={boxPlotYAttr}\n              title={'Box Plot of Air Quality Data'}\n            ></BoxPlot>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setBoxPlotXAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setBoxPlotYAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Line Graph</p>\n            <LineGraph\n              data={dataNQ}\n              xAxisAttribute={lineGraphXAttr}\n              yAxisAttribute={lineGraphYAttr}\n              title={'Line Graph Distribution of Air Quality Data'}\n            ></LineGraph>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setlineGraphXAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setlineGraphYAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Bar Chart</p>\n            <BarChart\n              data={dataNQ}\n              xAxisAttribute={barChartXAttr}\n              yAxisAttribute={barChartYAttr}\n              title={'Bar Chart of Air Quality Data'}\n            ></BarChart>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setBarChartXAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setBarChartYAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Area Chart</p>\n            <AreaChart\n              data={dataNQ}\n              xAxisAttribute={areaChartXAttr}\n              yAxisAttribute={areaChartYAttr}\n              title={'Area Chart of Air Quality Data'}\n            ></AreaChart>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setAreaChartXAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setAreaChartYAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default VisualizerNQ\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockDataAq.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockdataAQ.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Carousel.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/CarouselButtons.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/LazyImage.js",["179"],"import React, { useEffect } from 'react'\nimport { withLazyImageContext } from './LazyImageContext'\nimport './lazyImage.css'\n\nconst LazyImage = ({ src, aspectRatio, lazyLoad }) => {\n  const paddingTop = `${(aspectRatio[1] / aspectRatio[0]) * 100}%`\n\n  useEffect(() => {\n    if (lazyLoad) lazyLoad.update()\n  }, [src, aspectRatio, lazyLoad])\n\n  return (\n    <div className=\"lazyImage\" style={{ paddingTop }}>\n      <img className=\"lazyImage__img\" data-src={src} />\n    </div>\n  )\n}\n\nexport default withLazyImageContext(LazyImage)\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/LazyImageContext.js",[],{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":14},{"ruleId":"184","severity":1,"message":"188","line":31,"column":8,"nodeType":"186","messageId":"187","endLine":31,"endColumn":16},{"ruleId":"184","severity":1,"message":"189","line":6,"column":10,"nodeType":"186","messageId":"187","endLine":6,"endColumn":14},{"ruleId":"184","severity":1,"message":"190","line":9,"column":8,"nodeType":"186","messageId":"187","endLine":9,"endColumn":19},{"ruleId":"184","severity":1,"message":"191","line":11,"column":8,"nodeType":"186","messageId":"187","endLine":11,"endColumn":15},{"ruleId":"184","severity":1,"message":"192","line":22,"column":9,"nodeType":"186","messageId":"187","endLine":22,"endColumn":16},{"ruleId":"184","severity":1,"message":"193","line":23,"column":20,"nodeType":"186","messageId":"187","endLine":23,"endColumn":25},{"ruleId":"184","severity":1,"message":"194","line":24,"column":9,"nodeType":"186","messageId":"187","endLine":24,"endColumn":21},{"ruleId":"184","severity":1,"message":"195","line":25,"column":7,"nodeType":"186","messageId":"187","endLine":25,"endColumn":14},{"ruleId":"184","severity":1,"message":"196","line":26,"column":9,"nodeType":"186","messageId":"187","endLine":26,"endColumn":21},{"ruleId":"184","severity":1,"message":"197","line":3,"column":8,"nodeType":"186","messageId":"187","endLine":3,"endColumn":20},{"ruleId":"184","severity":1,"message":"198","line":11,"column":11,"nodeType":"186","messageId":"187","endLine":11,"endColumn":23},{"ruleId":"184","severity":1,"message":"199","line":3,"column":10,"nodeType":"186","messageId":"187","endLine":3,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":34,"column":7,"nodeType":"186","messageId":"202","endLine":34,"endColumn":11},{"ruleId":"184","severity":1,"message":"203","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":12},{"ruleId":"184","severity":1,"message":"203","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":12},{"ruleId":"184","severity":1,"message":"199","line":3,"column":10,"nodeType":"186","messageId":"187","endLine":3,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":52,"column":7,"nodeType":"186","messageId":"202","endLine":52,"endColumn":11},{"ruleId":"184","severity":1,"message":"199","line":3,"column":10,"nodeType":"186","messageId":"187","endLine":3,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":36,"column":7,"nodeType":"186","messageId":"202","endLine":36,"endColumn":11},{"ruleId":"184","severity":1,"message":"199","line":3,"column":10,"nodeType":"186","messageId":"187","endLine":3,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":36,"column":7,"nodeType":"186","messageId":"202","endLine":36,"endColumn":11},{"ruleId":"184","severity":1,"message":"198","line":7,"column":11,"nodeType":"186","messageId":"187","endLine":7,"endColumn":23},{"ruleId":"184","severity":1,"message":"204","line":7,"column":25,"nodeType":"186","messageId":"187","endLine":7,"endColumn":40},{"ruleId":"184","severity":1,"message":"205","line":9,"column":8,"nodeType":"186","messageId":"187","endLine":9,"endColumn":16},{"ruleId":"184","severity":1,"message":"206","line":16,"column":8,"nodeType":"186","messageId":"187","endLine":16,"endColumn":10},{"ruleId":"184","severity":1,"message":"190","line":9,"column":8,"nodeType":"186","messageId":"187","endLine":9,"endColumn":19},{"ruleId":"184","severity":1,"message":"191","line":11,"column":8,"nodeType":"186","messageId":"187","endLine":11,"endColumn":15},{"ruleId":"207","severity":1,"message":"208","line":14,"column":7,"nodeType":"209","endLine":14,"endColumn":56},"no-native-reassign",["210"],"no-negated-in-lhs",["211"],"no-unused-vars","'poster' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'Link' is defined but never used.","'Correlation' is defined but never used.","'HeatMap' is defined but never used.","'labelDS' is assigned a value but never used.","'setDS' is assigned a value but never used.","'datasetNames' is assigned a value but never used.","'display' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'StickyHeader' is defined but never used.","'loggedInUser' is assigned a value but never used.","'dataNonGeo' is defined but never used.","no-redeclare","'data' is already defined.","redeclared","'Plot' is defined but never used.","'setLoggedInUser' is assigned a value but never used.","'logFull1' is defined but never used.","'x2' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]