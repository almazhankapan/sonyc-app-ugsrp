[{"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/index.js":"1","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/App.js":"2","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/reportWebVitals.js":"3","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/Home.js":"4","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/DataCollection.js":"5","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/DataVisualization.js":"6","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/MeetTheTeam.js":"7","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/AboutUgsrp.js":"8","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/ScrollToTop.js":"9","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/VisualizerMenu.js":"10","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/VisualizerAQ.js":"11","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockData.js":"12","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Footer.js":"13","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Header.js":"14","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/Histogram.js":"15","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/BarChart.js":"16","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/BoxPlot.js":"17","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/Correlation.js":"18","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/HeatMap.js":"19","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/AreaChart.js":"20","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/LineGraph.js":"21","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/ScatterPlot.js":"22","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/HeaderLogo.js":"23","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Hamburger.js":"24","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/UxHci.js":"25","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockDataNq.js":"26","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/VisualizerNQ.js":"27","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockDataAq.js":"28","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockdataAQ.js":"29","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Carousel.js":"30","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/CarouselButtons.js":"31","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/LazyImage.js":"32","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/LazyImageContext.js":"33"},{"size":493,"mtime":1628883860000,"results":"34","hashOfConfig":"35"},{"size":2422,"mtime":1629660379233,"results":"36","hashOfConfig":"35"},{"size":356,"mtime":1628883860000,"results":"37","hashOfConfig":"35"},{"size":4579,"mtime":1629646003232,"results":"38","hashOfConfig":"35"},{"size":8975,"mtime":1629421569932,"results":"39","hashOfConfig":"35"},{"size":44245,"mtime":1629847282796,"results":"40","hashOfConfig":"35"},{"size":3149,"mtime":1628883860000,"results":"41","hashOfConfig":"35"},{"size":8747,"mtime":1629421035741,"results":"42","hashOfConfig":"35"},{"size":251,"mtime":1628883860000,"results":"43","hashOfConfig":"35"},{"size":1364,"mtime":1628883860000,"results":"44","hashOfConfig":"35"},{"size":8950,"mtime":1629660569241,"results":"45","hashOfConfig":"35"},{"size":47904,"mtime":1628883860000,"results":"46","hashOfConfig":"35"},{"size":455,"mtime":1629421530065,"results":"47","hashOfConfig":"35"},{"size":1223,"mtime":1628883860000,"results":"48","hashOfConfig":"35"},{"size":1043,"mtime":1628883860000,"results":"49","hashOfConfig":"35"},{"size":1088,"mtime":1628883860000,"results":"50","hashOfConfig":"35"},{"size":1094,"mtime":1628883860000,"results":"51","hashOfConfig":"35"},{"size":316,"mtime":1628883860000,"results":"52","hashOfConfig":"35"},{"size":305,"mtime":1628883860000,"results":"53","hashOfConfig":"35"},{"size":1580,"mtime":1628883860000,"results":"54","hashOfConfig":"35"},{"size":1294,"mtime":1628883860000,"results":"55","hashOfConfig":"35"},{"size":1309,"mtime":1628883860000,"results":"56","hashOfConfig":"35"},{"size":331,"mtime":1628883860000,"results":"57","hashOfConfig":"35"},{"size":1035,"mtime":1629401137996,"results":"58","hashOfConfig":"35"},{"size":2956,"mtime":1629400973289,"results":"59","hashOfConfig":"35"},{"size":120770,"mtime":1629660596696,"results":"60","hashOfConfig":"35"},{"size":8735,"mtime":1629666729416,"results":"61","hashOfConfig":"35"},{"size":20340,"mtime":1629660602650,"results":"62","hashOfConfig":"35"},{"size":20340,"mtime":1629660602650,"results":"63","hashOfConfig":"35"},{"size":2158,"mtime":1629673785538,"results":"64","hashOfConfig":"35"},{"size":1349,"mtime":1629672150135,"results":"65","hashOfConfig":"35"},{"size":528,"mtime":1629672259181,"results":"66","hashOfConfig":"35"},{"size":689,"mtime":1629672288249,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1vj156j",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"70"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/index.js",[],["149","150"],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/App.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/reportWebVitals.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/Home.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/DataCollection.js",["151"],"import React from 'react'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport poster from '../images/poster.png'\nimport './DataCollection.css'\n\nfunction DataCollection() {\n  return (\n    <>\n      <Header />\n      <div className=\"home-ugsrp\">\n        <h2 className=\"header-text\">Sensor Data Collection and Analysis</h2>\n        <div className=\"block\">\n          <p className=\"full-text\">\n            <br />\n            <br />\n            SONYC Air Quality (sonycAQ) Page to preview the code and related\n            docs for the air quality (AQ) aspects of the{' '}\n            <a href=\"https://wp.nyu.edu/sonyc\">\n              Sounds Of New York City Project\n            </a>\n            . The AQ sensor chosen is the{' '}\n            <a href=\"https://www.pierasystems.com/products/piera-7100-intelligent-particle-sensor\">\n              Piera IPS-7100 Intelligent Particle Sensor\n            </a>{' '}\n            which communiactes via UART with the SONYC project's Raspberry Pi 4B\n            based noise sensor.\n            <br /> <br />\n            <img\n              src={\n                'https://user-images.githubusercontent.com/86373439/128935455-52568d5b-1691-46e3-8aee-3af3ae30c94b.png'\n              }\n              alt=\"poster gif\"\n              className=\"sensor-img\"\n            />\n          </p>\n          <br />\n        </div>\n        <br /> <br />\n        <div className=\"block\">\n          <h4 className=\"gif-text\">Introduction - Why is AQ part of SONYC?</h4>\n          <p className=\"full-text\">\n            {' '}\n            Air pollutants, including particulate matter (PM's), particularly\n            PM2.5, are a significant health concern in urban areas such as New\n            York City. The NYC Department of Health estimates approximately\n            3,000 people die each year due to PM2.5-related illnesses in the\n            city, and approximately 8,000 more hospital visits can be linked to\n            dangerous PM2.5 exposure.\n            <a href=\"https://www1.nyc.gov/assets/doh/downloads/pdf/eode/eode-air-quality-impact.pdf\">\n              Maps\n            </a>\n            from a study by the Department of Health show that the distribution\n            of PM2.5-related medical incidents is not even across neighborhoods,\n            and is elevated with higher poverty rates. This shows that\n            particulate matter air pollution is a community-based problem, that\n            may have a community-based solution. The following tables from the\n            aforementioned{' '}\n            <a href=\"https://www1.nyc.gov/assets/doh/downloads/pdf/eode/eode-air-quality-impact.pdf\">\n              Department of Health\n            </a>\n            illustrate the danger of NYC PM2.5 concentrations and showcase the\n            exacerbated risk to communities with high poverty rates. Further\n            figures are available at the source.\n            <br />\n            <br />\n            <img\n              src={\n                'https://user-images.githubusercontent.com/86373439/128933800-203ed878-9706-475b-8545-4675aa4cc693.png'\n              }\n              alt=\"poster gif\"\n              className=\"sensor-img\"\n            />\n            <img\n              src={\n                'https://user-images.githubusercontent.com/86373439/128934092-9049ec9c-7452-40d1-ad3f-a3150b4776e7.png'\n              }\n              alt=\"poster gif\"\n              className=\"sensor-img\"\n            />\n            Images courtesy of the NYC Department of Health and Mental Hygiene.\n            <br />\n            <br />\n            SONYC has spent years working with citizen-science based approaches\n            to the issue of noise pollution in New York City, and we are now\n            capable of expanding that infrastructure to examine air pollution.\n            The availablility of reasonably-priced and scalable devices such as\n            the IPS-7100 will allow us to eventually create a wide network of\n            citizen-based collectors of air pollutant levels and air quality in\n            New York City neighborhoods.\n            <br />\n            <br />\n            We are particularly interested in examining air pollution due to the\n            potential correlation between it and noise pollution. Some research\n            into this correlation has been done, but neither in NYC residential\n            settings, nor through a citizen-based initiative. SONYC is in a\n            unique position to leverage existing sound-collecting apparatus and\n            community relationships towards examining this correlation. More\n            data regarding this correlation may lead to better understandings of\n            links between air or noise pollution and certain health conditions,\n            and can help city agencies and community groups to better devote\n            resources to neighborhoods with pollution problems. <br />\n            <br />\n            Additionally, SONYC's existing app for delivering sound data to\n            residents in real time and requesting their qualitative analysis of\n            sound quality can be modified to perform the same functions with air\n            quality. AQ data processed by the new code can be delivered into the\n            app and presented in real time, in a manner suitable for a\n            non-specialist audience. It can also be used as a means for\n            collecting qualitative data, allowing us to link quantitative\n            analysis with qualitative feedback.\n          </p>\n          <br />\n        </div>\n        <br /> <br />\n        <div className=\"block\">\n          <h4 className=\"gif-text\">Data Formatting Information </h4>\n          <h5 className=\"gif-text-h5\">Output String Information </h5>\n          <p className=\"full-text\">\n            Output information from the IPS is delivered to the Pi as a string.\n            This string contains the particle count and particle mass for the\n            particle sizes measured by the sensor (PM0.1, PM0.3, PM0.5, PM1.0,\n            PM2.5, PM5.0, and PM10) in the units the sensor is set to. Under\n            default settings, the count is measured in # of particles per liter\n            (#/L), and the mass in micrograms per cubic meter (ug/m^3). Also\n            under default settings, the string terminates with the sensor's\n            serial number and network key.\n            <br />\n          </p>\n          <h5 className=\"gif-text-h5\">Example Unformatted Output String</h5>\n\n          <p className=\"full-text\">\n            <code>\n              PC0.1,###,PC0.3,###,PC0.5,###,PC1.0,###,PC2.5,###,PC5.0,###,PC10,###,PM0.1,\n              #.####,PM0.3, #.####,PM0.5, #.####,PM1.0, #.####,PM2.5,\n              #.####,PM5.0, #.####,PM10, #.####,IPS-S-#########,abcdefg######=\n            </code>\n          </p>\n          <h5 className=\"gif-text-h5\">CSV File Format</h5>\n\n          <p className=\"full-text\">\n            CSV files are generated once every minute, and a reading is taken\n            every second, corresponding to a new row in the current file. Each\n            CSV file is named with the following format:\n            <code>sonycnode-xxxxxxxxxxxx-pm-YYYY_MM_DD-HH_MM_SS.csv</code>. The\n            first line in each file is a header, and all subsequent lines\n            represent one of the measurements, with the first column as the\n            timestamp (in seconds since the beginning of the epoch), and the\n            subsequent columns representing PC0.1 - PC10, and PM0.1 - PM10.\n          </p>\n          <h5 className=\"gif-text-h5\">CSV File Header</h5>\n          <p className=\"full-text\">\n            <code>\n              datetime,PC0.1,PC0.3,PC0.5,PC1.0,PC2.5,PC5.0,PC10,PM0.1,PM0.3,PM0.5,PM1.0,PM2.5,PM5.0,PM10\n            </code>\n          </p>\n          <br />\n        </div>\n        <div className=\"block\">\n          <h4 className=\"gif-text\">Previous Development Stages (Completed) </h4>\n\n          <p className=\"full-text\">\n            1. Wire up sensor to Raspberry Pi via UART and create Python script\n            to read its output <br />\n            <br />\n            2. Parse output string and write to CSV file with a measurment per\n            second <br />\n            <br />\n            3. Create a new CSV file every minute with each containing a header\n            row and a minutes worth of measurements - each file should be named\n            with the following format:\n            <br />\n            <br />\n            <code>sonycnode-xxxxxxxxxxxx-pm-YYYY_MM_DD-HH_MM_SS.csv</code>{' '}\n            <br />\n            <br />\n            4. Collect a few days worth of continuous data from the sensor\n            nearby an open window <br />\n            <br />\n            5. Create a Jupyter Notebook in this repository and plot the data\n            using matplotlib\n          </p>\n        </div>\n        <br /> <br />\n        <br />\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default DataCollection\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/DataVisualization.js",["152"],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/MeetTheTeam.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/AboutUgsrp.js",["153"],"import React from 'react'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport poster from '../images/poster.png'\nimport airq from '../images/airq.jpg'\nimport { Link } from 'react-router-dom'\n\nimport './AboutUgsrp.css'\n\nfunction AboutUgsrp() {\n  return (\n    <>\n      <Header />\n      <div className=\"home-ugsrp\">\n        <h2 className=\"header-text-ugsrp\">\n          SONYC project at Undergraduate Summer Research Program 2021.\n        </h2>\n        <div className=\"block\">\n          <p className=\"full-text\">\n            <br />\n            <br />\n            NYU Tandon School of Engineering’s Undergraduate Summer Research\n            Program (UGSRP) provides a unique opportunity for NYU Tandon, NYU\n            Abu Dhabi, NYU Shanghai, NYU CAS + Tandon Dual Degree Program, and\n            other select US students to engage in research over the course of\n            the summer semester. Learn more about UGSRP{' '}\n            <a href=\"https://engineering.nyu.edu/research-innovation/student-research/undergraduate-summer-research-program\">\n              here\n            </a>\n            . <br />\n            <br />\n            Students work with their faculty mentors on various research topics\n            while also participating in seminars presented by distinguished\n            administrative and academic personnel. In addition, research\n            presentations and poster sessions are held in which students have\n            the opportunity to present their research to peoples of all\n            disciplines and backgrounds.\n          </p>\n          <br />\n          <p className=\"full-text\">\n            <br />\n            <br />\n            In the Summer of 2021, The Sounds of New York City lab also took\n            part in the UGSRP program where under the supervision of Professor\n            Graham Dove and Professor Oded Nov, students worked on sensor data\n            collection, analysis, visualization and UX, Human Computer\n            Interaction design. Below you can view the poster of the project\n            which is also available at the NYU Tandon web{' '}\n            <a href=\"https://photos.google.com/share/AF1QipP5wgXtnA_SQaLtKfotCmlaSONpKIWKwV8Kv_Ha5NBArBSWs87vRf_2leGrKLGgWQ?key=ZXI4b1IzSzFsbkY5OWVlQlIxbjdKbVZjRmxwZ2ZR\">\n              poster session\n            </a>\n            .\n          </p>\n          <br />\n          <figure>\n            <img src={poster} alt=\"poster gif\" className=\"gif-img\" />\n            <figlabel>\n              SONYC project poster at Undergraduate Summer Research Program 2021\n            </figlabel>\n          </figure>\n        </div>\n        <div className=\"block\">\n          <h4 className=\"gif-text\"> I. Summer Project Objectives </h4>\n          <p className=\"full-text\">\n            {' '}\n            1. Develop an Air Quality (AQ) addendum to the existing Sounds of\n            New York City (SONYC) noise-monitoring infrastructure Research.\n            <br />\n            <br />\n            2.Research and implement new methods for visualizing AQ and sound\n            monitoring data for a non-scientific audience.\n          </p>\n        </div>\n        <div className=\"block\">\n          <h4 className=\"gif-text\"> II. Background Research</h4>\n          <h5 className=\"gif-text-h5\"> Citizen Science</h5>\n          <p className=\"full-text\">\n            {' '}\n            Citizen science is collaborative research done by non-professionals,\n            by and for the community. We believe the best way to effectively\n            assess air pollution in urban NYC neighborhoods is to monitor at the\n            residential level, involving communities impacted by air pollution\n            in data collection, as well as data visualization. Thus, our\n            non-scientific audience will be to appreciate the implications of\n            the data.\n          </p>\n          <h5 className=\"gif-text-h5\">\n            {' '}\n            Air Pollution and Particulate Matter (PM)\n          </h5>\n          <p className=\"full-text\">\n            {' '}\n            Air pollution poses significant health risks to urban populations,\n            notably for the elderly, immigrants, and people of color. Many\n            residents of New York City fall into one or more of these\n            categories, placing them at higher risk for air pollution-related\n            medical issues.\n            <figure>\n              <img src={airq} alt=\"air1\" className=\"gif-img-sm\" />\n              <figlabel>\n                Size comparison for PM particles. Source:{' '}\n                <a href=\"https://www.sciencelearn.org.nz/images/1869-size-comparisons-for-pm-particles\">\n                  Sciencelearn.org\n                </a>\n              </figlabel>\n            </figure>\n            <br />\n            Particulate Matter is all particles ≤ a certain diameter (in μm)\n            within the air, varying in size, composition, and origin; many are\n            hazardous. PM2.5 particularly are linked to adverse health effects.\n          </p>\n          <h5 className=\"gif-text-h5\"> Noise Quality and Air Pollution</h5>\n          <p className=\"full-text\">\n            Research shows a potentially strong correlation between noise and\n            air pollution. Machine learning models show that using the impact of\n            noise pollution as a feature improves accuracy of air pollution\n            level predictions. In contrast with air pollution, noise pollution\n            continues to increase in developed countries and, yet, there are\n            rarely strict limits for community noise levels.\n          </p>\n          <h5 className=\"gif-text-h5\"> Sensor Data Visualization Research</h5>\n          <p className=\"full-text\">\n            Learn more about an overview of state-of-the-art Sensor Data\n            Visualization research methods, tools and challenges on the{' '}\n            <a href=\"/data-visualization\">\n              Data Visualization and Research page.\n            </a>\n          </p>\n        </div>\n        <div className=\"block\">\n          <h4 className=\"gif-text\">III. Methods</h4>\n          <h5 className=\"gif-text-h5\">Data Collection</h5>\n          <p className=\"full-text\">\n            Have an overview of the steps for collecting, processing and\n            analyzing the Air Quality sensor data on the\n            <a href=\"/data-collection\">\n              {' '}\n              Sensor Data Collection and Analysis\n            </a>{' '}\n            page.\n          </p>\n          <h5 className=\"gif-text-h5\">Data Visualization</h5>\n          <p className=\"full-text\">\n            Interact with the graphs that were developed based on earlier{' '}\n            <a id=\"refer\" href=\"/data-visualization\">\n              Sensor Data Visualization research\n            </a>{' '}\n            on the <a href=\"/visualizer\">the Data Visualization Interface</a>{' '}\n            page. The graphs visualize both Air Quality and Noise Level sensor\n            data.\n          </p>\n          <h5 className=\"gif-text-h5\">\n            UX and Human Computer Interaction design\n          </h5>\n          <p className=\"full-text\">\n            Learn about UX and Human Computer Interaction design implementations\n            for the SONYC mobile app on the <a href=\"/hci\">UX and HCI design</a>{' '}\n            page.\n          </p>\n        </div>\n        <div className=\"block\">\n          <h4 className=\"gif-text\">IV. Conclusions</h4>\n          <p className=\"full-text\">\n            At the end of the program, we now have: <br />\n            <br />\n            - Code for reading our sensor values and saving formatted PM data\n            Code for compiling data, and plotting various information we might\n            choose <br />\n            <br />\n            - Sample data runs and sample notebooks that can be used for future\n            reference regarding trends and sensor behavior\n            <br /> <br />\n            - Sample data runs and sample notebooks that can be used for future\n            reference regarding trends and sensor behavior\n            <br />\n            <br /> - React web application that allows public users to select\n            dataset (air quality, noise quality datasets), graph type (e.g.\n            histogram, box plot), and visualize the data <br />\n            <br />\n            <br />\n            - Compilation of current research methods and tools to visualize the\n            sensor data.\n            <br />\n            <br />\n            - Prototype for the AQ extension of the SONYC mobile application\n            <br />\n          </p>\n          <br />\n        </div>\n        <br /> <br />\n        <br />\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default AboutUgsrp\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/ScrollToTop.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/VisualizerMenu.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/VisualizerAQ.js",["154","155","156","157","158","159","160"],"import React from 'react'\n//Important! Below the mock data is imported from the utils folder\nimport { dataAQ } from '../utils/MockDataAq'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport Histogram from './Histogram'\nimport BarChart from './BarChart'\nimport BoxPlot from './BoxPlot'\nimport Correlation from './Correlation'\nimport AreaChart from './AreaChart'\nimport HeatMap from './HeatMap'\nimport LineGraph from './LineGraph'\nimport ScatterPlot from './ScatterPlot'\nimport './Visualizer.css'\n\nimport { useState } from 'react'\n\n//Main component that displays your created graph\n//Components in React can be in the form of functions, classes etc.\n//and consist of both javascript code and html code (html is the return value)\nfunction VisualizerAQ() {\n  const labelDS = 'Select a Dataset'\n  const [database, setDS] = useState('')\n  const datasetNames = ['Air Quality Dataset', 'Noise Quality Dataset']\n  let display = true\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const graphObject = { database }\n    console.log(graphObject)\n  }\n  const dataKeys = Object.keys(dataAQ[0])\n  const [histoXAttr, setHistoXAttr] = useState('ID')\n  //scatter plot attributes\n  const [ScatoXAttr, setScatoXAttr] = useState('ID')\n  const [ScatoYAttr, setScatoYAttr] = useState('ID')\n\n  //box plot attributes\n  const [boxPlotXAttr, setBoxPlotXAttr] = useState('ID')\n  const [boxPlotYAttr, setBoxPlotYAttr] = useState('Time')\n\n  //line graph attributes\n  const [lineGraphXAttr, setlineGraphXAttr] = useState('ID')\n  const [lineGraphYAttr, setlineGraphYAttr] = useState('ID')\n\n  //bar chart attributes\n  const [barChartXAttr, setBarChartXAttr] = useState('ID')\n  const [barChartYAttr, setBarChartYAttr] = useState('ID')\n\n  //area chart attributes\n  const [areaChartXAttr, setAreaChartXAttr] = useState('ID')\n  const [areaChartYAttr, setAreaChartYAttr] = useState('ID')\n\n  //Below is the html code (return value)\n  return (\n    <>\n      <Header />\n      <div className=\"home-graphs\">\n        <h2 className=\"header-text-graphs\">SONYC Visualizer App</h2>\n\n        <div className=\"graph-wrapper\">\n          <div className=\"graph-block\">\n            <p>Histogram</p>\n            <Histogram\n              data={dataAQ}\n              xAxisAttribute={histoXAttr}\n              title={`Histogram Distribution of Noise Level data`}\n            ></Histogram>\n\n            <div>\n              <div>X Axis</div>\n              <div>\n                <select onChange={(e) => setHistoXAttr(e.target.value)}>\n                  {dataKeys.map((key) => (\n                    <option key={key} value={key}>\n                      {key}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Scatter Plot</p>\n            <ScatterPlot\n              data={dataAQ}\n              xAxisAttribute={ScatoXAttr}\n              yAxisAttribute={ScatoYAttr}\n              title={`Scatter Plot Distribution of Noise Level data`}\n            ></ScatterPlot>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setScatoXAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setScatoYAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>BoxPlot</p>\n            <BoxPlot\n              data={dataAQ}\n              xAxisAttribute={boxPlotXAttr}\n              yAxisAttribute={boxPlotYAttr}\n            ></BoxPlot>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setBoxPlotXAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setBoxPlotYAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Line Graph</p>\n            <LineGraph\n              data={dataAQ}\n              xAxisAttribute={lineGraphXAttr}\n              yAxisAttribute={lineGraphYAttr}\n              title={`Line Graph of Noise Level data`}\n            ></LineGraph>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setlineGraphXAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setlineGraphYAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Bar Chart</p>\n            <BarChart\n              data={dataAQ}\n              xAxisAttribute={barChartXAttr}\n              yAxisAttribute={barChartYAttr}\n              title={`Bar Chart of Noise Level data`}\n            ></BarChart>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setBarChartXAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setBarChartYAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Area Chart</p>\n            <AreaChart\n              data={dataAQ}\n              xAxisAttribute={areaChartXAttr}\n              yAxisAttribute={areaChartYAttr}\n              title={`Area Chart of Noise Level data`}\n            ></AreaChart>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setAreaChartXAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setAreaChartYAttr(e.target.value)}>\n                    {dataKeys.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default VisualizerAQ\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockData.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Footer.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Header.js",["161","162"],"import React, { useEffect, useState, useRef } from 'react'\nimport 'react-sticky-header/styles.css'\nimport StickyHeader from 'react-sticky-header'\nimport './Header.css'\nimport Hamburger from './Hamburger'\nimport logo from '../images/sonyc-inverted-logo.png'\nimport HeaderLogo from './HeaderLogo'\nimport { AuthContext } from '../App'\n\nconst Header = () => {\n  const { loggedInUser } = React.useContext(AuthContext)\n  const [isSticky, setSticky] = useState(false)\n  const wrapper = useRef(null)\n  const handleScroll = () => {\n    if (wrapper.current) {\n      setSticky(wrapper.current.getBoundingClientRect().top <= 0)\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll)\n    return () => {\n      window.removeEventListener('scroll', () => handleScroll)\n    }\n  }, [])\n\n  return (\n    <div\n      className={`header-root sticky-wrapper${isSticky ? ' sticky' : ''}`}\n      ref={wrapper}>\n      <div className=\"sticky-inner\">\n        <Hamburger\n          pageWrapId={'page-wrap'}\n          outerContainerId={'outer-container'}\n        />\n        <HeaderLogo src={logo} className=\"logo-img\" />\n        <div className=\"login-signup-buttons\"></div>\n      </div>\n    </div>\n  )\n}\n\nexport default Header\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/Histogram.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/BarChart.js",["163","164"],"import React from 'react'\nimport Plot from 'react-plotly.js'\nimport { dataNonGeo } from '../utils/MockData'\n\nconst BarChart = ({ data, xAxisAttribute, yAxisAttribute }) => {\n  let xData = data.map((d) => {\n    if (d[xAxisAttribute] === undefined || d[xAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[xAxisAttribute]\n  })\n\n  let yData = data.map((d) => {\n    if (d[yAxisAttribute] === undefined || d[yAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[yAxisAttribute]\n  })\n\n  var datapoints = {\n    x: xData,\n    y: yData,\n    marker: {\n      size: 12,\n      color: 'rgba(190, 53, 110, 0.5)'\n    },\n    type: 'bar',\n    hovertemplate:\n      '<b>Noise Value</b>: %{y}' +\n      '<br><b>Day</b>: %{x}<br>' +\n      '<extra></extra>'\n  }\n  //accessibility\n  var data = [datapoints]\n\n  let layout = {\n    xaxis: { showgrid: false },\n    yaxis: { showgrid: false },\n    title: 'Scatter Plot of Noise Level data',\n    hoverlabel: { bgcolor: '#FFF' }\n  }\n\n  return (\n    <>\n      <Plot className=\"\" data={data} layout={layout} />\n    </>\n  )\n}\n\nexport default BarChart\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/BoxPlot.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/Correlation.js",["165"],"import React from 'react'\nimport Plot from 'react-plotly.js'\n\nfunction Correlation() {\n  return (\n    <>\n      <div>\n        <h2 className=\"header-text\">Correlation </h2>\n        <div className=\"block\">\n          <p className=\"full-text\">TBH</p>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Correlation\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/HeatMap.js",["166"],"import React from 'react'\nimport Plot from 'react-plotly.js'\n\nfunction HeatMap() {\n  return (\n    <>\n      <div>\n        <h2 className=\"header-text\">Heat Map </h2>\n        <div className=\"block\">\n          <p className=\"full-text\">TBH</p>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default HeatMap\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/AreaChart.js",["167","168"],"import React from 'react'\nimport Plot from 'react-plotly.js'\nimport { dataNonGeo } from '../utils/MockData'\n\nconst AreaChart = ({ data, xAxisAttribute, yAxisAttribute }) => {\n  let xData = data.map((d) => {\n    if (d[xAxisAttribute] === undefined || d[xAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[xAxisAttribute]\n  })\n\n  let yData = data.map((d) => {\n    if (d[yAxisAttribute] === undefined || d[yAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[yAxisAttribute]\n  })\n\n  var datapoints1 = {\n    x: xData,\n    y: yData,\n    marker: {\n      size: 12,\n      color: 'rgb(45, 70, 207)'\n    },\n    fill: 'tozeroy',\n    type: 'scatter',\n\n    hovertemplate:\n      '<b>Noise Value</b>: %{y}' +\n      '<br><b>Day</b>: %{x}<br>' +\n      '<extra></extra>'\n  }\n\n  var datapoints2 = {\n    x: xData,\n    y: yData,\n    marker: {\n      size: 12,\n      color: 'rgb(222, 213, 115)'\n    },\n    fill: 'tonexty',\n\n    type: 'scatter',\n    hovertemplate:\n      '<b>Noise Value</b>: %{y}' +\n      '<br><b>Day</b>: %{x}<br>' +\n      '<extra></extra>'\n  }\n  //accessibility\n  var data = [datapoints1, datapoints2]\n\n  let layout = {\n    margin: {\n      pad: 5\n    },\n    transition: {\n      duration: 500,\n      easing: 'cubic'\n    },\n    frame: {\n      duration: 500\n    },\n    xaxis: { showgrid: true },\n    yaxis: { showgrid: true },\n    line: {\n      width: 0\n    },\n    title: 'Scatter Plot of Noise Level data',\n    hoverlabel: { bgcolor: '#FFF' }\n  }\n\n  return (\n    <>\n      <Plot className=\"\" data={data} layout={layout} />\n    </>\n  )\n}\n\nexport default AreaChart\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/LineGraph.js",["169","170"],"import React from 'react'\nimport Plot from 'react-plotly.js'\nimport { dataNonGeo } from '../utils/MockData'\n\nconst LineGraph = ({ data, xAxisAttribute, yAxisAttribute }) => {\n  let xData = data.map((d) => {\n    if (d[xAxisAttribute] === undefined || d[xAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[xAxisAttribute]\n  })\n\n  let yData = data.map((d) => {\n    if (d[yAxisAttribute] === undefined || d[yAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[yAxisAttribute]\n  })\n\n  var datapoints = {\n    x: xData,\n    y: yData,\n    mode: 'lines',\n    text: [],\n    marker: {\n      size: 12,\n      color: 'rgb(56, 176, 88)'\n    },\n    type: 'scatter',\n    hovertemplate:\n      '<b>Noise Value</b>: %{y}' +\n      '<br><b>Day</b>: %{x}<br>' +\n      '<extra></extra>'\n  }\n  //accessibility\n  var data = [datapoints]\n\n  let layout = {\n    margin: {\n      pad: 5\n    },\n    transition: {\n      duration: 500,\n      easing: 'cubic'\n    },\n    frame: {\n      duration: 500\n    },\n    xaxis: { showgrid: false },\n    yaxis: { showgrid: false },\n    line: {\n      width: 0\n    },\n    title: 'Line Graph of Noise Level data',\n    hoverlabel: { bgcolor: '#FFF' }\n  }\n\n  return (\n    <>\n      <Plot className=\"\" data={data} layout={layout} />\n    </>\n  )\n}\n\nexport default LineGraph\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/ScatterPlot.js",["171","172"],"import React from 'react'\nimport Plot from 'react-plotly.js'\nimport { dataNonGeo } from '../utils/MockData'\n\nconst ScatterPlot = ({ data, xAxisAttribute, yAxisAttribute }) => {\n  let xData = data.map((d) => {\n    if (d[xAxisAttribute] === undefined || d[xAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[xAxisAttribute]\n  })\n\n  let yData = data.map((d) => {\n    if (d[yAxisAttribute] === undefined || d[yAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[yAxisAttribute]\n  })\n\n  var datapoints = {\n    x: xData,\n    y: yData,\n    text: [],\n    mode: 'markers',\n    type: 'scatter',\n    marker: {\n      size: 12,\n      color: 'rgba(190, 53, 110, 0.5)'\n    },\n    hovertemplate:\n      '<b>Noise Value</b>: %{y}' +\n      '<br><b>Day</b>: %{x}<br>' +\n      '<extra></extra>'\n  }\n  //accessibility\n  var data = [datapoints]\n\n  let layout = {\n    margin: {\n      pad: 5\n    },\n    transition: {\n      duration: 500,\n      easing: 'cubic'\n    },\n    frame: {\n      duration: 500\n    },\n    xaxis: { showgrid: false },\n    yaxis: { showgrid: false },\n    line: {\n      width: 0\n    },\n    title: 'Scatter Plot of Noise Level data',\n    hoverlabel: { bgcolor: '#FFF' }\n  }\n\n  return (\n    <>\n      <Plot className=\"\" data={data} layout={layout} />\n    </>\n  )\n}\n\nexport default ScatterPlot\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/HeaderLogo.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Hamburger.js",["173","174"],"import React from 'react'\nimport { slide as Menu } from 'react-burger-menu'\nimport { Link } from 'react-router-dom'\nimport { AuthContext } from '../App'\n\nconst Hamburger = (props) => {\n  const { loggedInUser, setLoggedInUser } = React.useContext(AuthContext)\n  return (\n    <Menu {...props}>\n      <Link to=\"/Home\" id=\"home\" className=\"menu-item\">\n        About SONYC\n      </Link>\n      <Link to=\"/about-ugsrp\" className=\"menu-item\">\n        Undergraduate Summer Research'21\n      </Link>\n      <Link to=\"/data-collection\" className=\"menu-item\">\n        Data Collection and Analysis\n      </Link>\n      <Link to=\"/data-visualization\" className=\"menu-item\">\n        Data Visualization Research\n      </Link>\n      <Link to=\"/visualizer\" className=\"menu-item\">\n        Visualizer Interface\n      </Link>\n      <Link to=\"/hci\" className=\"menu-item\">\n        UX and HCI\n      </Link>\n      <Link to=\"/meet-the-team\" id=\"Meet-the-team\" className=\"menu-item\">\n        About the Team\n      </Link>\n    </Menu>\n  )\n}\nexport default Hamburger\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/pages/UxHci.js",["175"],"import React from 'react'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport poster from '../images/poster.png'\nimport granular from '../images/granular.png'\n\nimport './UxHci.css'\n\nfunction UxHci() {\n  return (\n    <>\n      <Header />\n      <div className=\"home-ugsrp\">\n        <h2 className=\"header-text-ugsrp\">\n          About SONYC Undergraduate Summer Research 2021\n        </h2>\n        <div className=\"block\">\n          <p className=\"full-text\">\n            <br />\n            <br />\n            Each summer, members of the Tandon School of Engineering faculty\n            open up their labs to allow NYU Tandon, NYU Dual Degree Program in\n            Engineering (CAS/Tandon), NYU Abu Dhabi, NYU Shanghai, and select\n            non-NYU rising sophomore, junior, and senior undergraduate students\n            to complete 10 weeks of hands-on research. <br />\n            Students work in the labs with their faculty mentors and other\n            mentors on various research topics while also participating in\n            seminars presented by distinguished administrative and academic\n            personnel. In addition, research presentations and poster sessions\n            are held in which students have the opportunity to present their\n            research to peoples of all disciplines and backgrounds.\n          </p>\n          <br />\n        </div>\n        <br /> <br />\n        <div className=\"block\">\n          <h4 className=\"gif-text\">\n            Undergraduate Summer Research Program Poster{' '}\n          </h4>\n          <p className=\"full-text\"> </p>\n          <br />\n          <img src={poster} alt=\"poster gif\" className=\"gif-img\" />\n        </div>\n        <br /> <br />\n        <div className=\"block\">\n          <h4 className=\"gif-text\">Why Noise? </h4>\n          <p className=\"full-text\">\n            Noise pollution is one of the topmost quality of life issues for\n            urban residents in the United States. It has been estimated that 9\n            out of 10 adults in New York City (NYC) are exposed to excessive\n            noise levels, i.e. beyond the limit of what the EPA considers to be\n            harmful. When applied to U.S. cities of more than 4 million\n            inhabitants, such estimates extend to over 72 million urban\n            residents. The objectives of SONYC are to create technological\n            solutions for: (1) the systematic, constant monitoring of noise\n            pollution at city scale; (2) the accurate description of acoustic\n            environments in terms of its composing sources; (3) broadening\n            citizen participation in noise reporting and mitigation; and (4)\n            enabling city agencies to take effective, information-driven action\n            for noise mitigation.\n          </p>\n          <br />\n        </div>\n        <br /> <br />\n        <br />\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default UxHci\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockDataNq.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/graphs/VisualizerNQ.js",["176","177"],"import React from 'react'\n//Important! Below the mock data is imported from the utils folder\nimport { dataNQ } from '../utils/MockDataNq.js'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport Histogram from './Histogram'\nimport BarChart from './BarChart'\nimport BoxPlot from './BoxPlot'\nimport Correlation from './Correlation'\nimport AreaChart from './AreaChart'\nimport HeatMap from './HeatMap'\nimport LineGraph from './LineGraph'\nimport ScatterPlot from './ScatterPlot'\nimport './Visualizer.css'\n\nimport { useState } from 'react'\n\n//Main component that displays your created graph\n//Components in React can be in the form of functions, classes etc.\n//and consist of both javascript code and html code (html is the return value)\nfunction VisualizerNQ() {\n  const dataKeysAq = Object.keys(dataNQ[0])\n  const [histoXAttr, setHistoXAttr] = useState('ID')\n\n  //scatter plot attributes\n  const [ScatoXAttr, setScatoXAttr] = useState('ID')\n  const [ScatoYAttr, setScatoYAttr] = useState('ID')\n\n  //box plot attributes\n  const [boxPlotXAttr, setBoxPlotXAttr] = useState('ID')\n  const [boxPlotYAttr, setBoxPlotYAttr] = useState('Time')\n\n  //line graph attributes\n  const [lineGraphXAttr, setlineGraphXAttr] = useState('ID')\n  const [lineGraphYAttr, setlineGraphYAttr] = useState('ID')\n\n  //bar chart attributes\n  const [barChartXAttr, setBarChartXAttr] = useState('ID')\n  const [barChartYAttr, setBarChartYAttr] = useState('ID')\n\n  //area chart attributes\n  const [areaChartXAttr, setAreaChartXAttr] = useState('ID')\n  const [areaChartYAttr, setAreaChartYAttr] = useState('ID')\n\n  //Below is the html code (return value)\n  return (\n    <>\n      <Header />\n      <div className=\"home-graphs\">\n        <h2 className=\"header-text-graphs\">SONYC Visualizer App</h2>\n\n        <div className=\"graph-wrapper\">\n          <div className=\"graph-block\">\n            <p>Histogram</p>\n            <Histogram\n              data={dataNQ}\n              xAxisAttribute={histoXAttr}\n              title={`Histogram Distribution of Air Quality data`}\n            ></Histogram>\n\n            <div>\n              <div>X Axis</div>\n              <div>\n                <select onChange={(e) => setHistoXAttr(e.target.value)}>\n                  {dataKeysAq.map((key) => (\n                    <option key={key} value={key}>\n                      {key}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Scatter Plot</p>\n            <ScatterPlot\n              data={dataNQ}\n              xAxisAttribute={ScatoXAttr}\n              yAxisAttribute={ScatoYAttr}\n              title={'Scatter Plot of Air Quality Data'}\n            ></ScatterPlot>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setScatoXAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setScatoYAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>BoxPlot</p>\n            <BoxPlot\n              data={dataNQ}\n              xAxisAttribute={boxPlotXAttr}\n              yAxisAttribute={boxPlotYAttr}\n              title={'Box Plot of Air Quality Data'}\n            ></BoxPlot>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setBoxPlotXAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setBoxPlotYAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Line Graph</p>\n            <LineGraph\n              data={dataNQ}\n              xAxisAttribute={lineGraphXAttr}\n              yAxisAttribute={lineGraphYAttr}\n              title={'Line Graph Distribution of Air Quality Data'}\n            ></LineGraph>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setlineGraphXAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setlineGraphYAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Bar Chart</p>\n            <BarChart\n              data={dataNQ}\n              xAxisAttribute={barChartXAttr}\n              yAxisAttribute={barChartYAttr}\n              title={'Bar Chart of Air Quality Data'}\n            ></BarChart>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setBarChartXAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setBarChartYAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"graph-block\">\n            <p>Area Chart</p>\n            <AreaChart\n              data={dataNQ}\n              xAxisAttribute={areaChartXAttr}\n              yAxisAttribute={areaChartYAttr}\n              title={'Area Chart of Air Quality Data'}\n            ></AreaChart>\n            <div className=\"wrap-axis\">\n              <div className=\"x-axis\">\n                <div>X Axis</div>\n                <div>\n                  <select onChange={(e) => setAreaChartXAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"y-axis\">\n                <div>Y Axis</div>\n                <div>\n                  <select onChange={(e) => setAreaChartYAttr(e.target.value)}>\n                    {dataKeysAq.map((key) => (\n                      <option key={key} value={key}>\n                        {key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default VisualizerNQ\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockDataAq.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/utils/MockdataAQ.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/Carousel.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/CarouselButtons.js",[],"/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/LazyImage.js",["178"],"import React, { useEffect } from 'react'\nimport { withLazyImageContext } from './LazyImageContext'\nimport './lazyImage.css'\n\nconst LazyImage = ({ src, aspectRatio, lazyLoad }) => {\n  const paddingTop = `${(aspectRatio[1] / aspectRatio[0]) * 100}%`\n\n  useEffect(() => {\n    if (lazyLoad) lazyLoad.update()\n  }, [src, aspectRatio, lazyLoad])\n\n  return (\n    <div className=\"lazyImage\" style={{ paddingTop }}>\n      <img className=\"lazyImage__img\" data-src={src} />\n    </div>\n  )\n}\n\nexport default withLazyImageContext(LazyImage)\n","/Users/almazhan/Desktop/sonyc-app-ugsrp/src/components/LazyImageContext.js",[],{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":4,"column":8,"nodeType":"185","messageId":"186","endLine":4,"endColumn":14},{"ruleId":"183","severity":1,"message":"187","line":27,"column":8,"nodeType":"185","messageId":"186","endLine":27,"endColumn":16},{"ruleId":"183","severity":1,"message":"188","line":6,"column":10,"nodeType":"185","messageId":"186","endLine":6,"endColumn":14},{"ruleId":"183","severity":1,"message":"189","line":9,"column":8,"nodeType":"185","messageId":"186","endLine":9,"endColumn":19},{"ruleId":"183","severity":1,"message":"190","line":11,"column":8,"nodeType":"185","messageId":"186","endLine":11,"endColumn":15},{"ruleId":"183","severity":1,"message":"191","line":22,"column":9,"nodeType":"185","messageId":"186","endLine":22,"endColumn":16},{"ruleId":"183","severity":1,"message":"192","line":23,"column":20,"nodeType":"185","messageId":"186","endLine":23,"endColumn":25},{"ruleId":"183","severity":1,"message":"193","line":24,"column":9,"nodeType":"185","messageId":"186","endLine":24,"endColumn":21},{"ruleId":"183","severity":1,"message":"194","line":25,"column":7,"nodeType":"185","messageId":"186","endLine":25,"endColumn":14},{"ruleId":"183","severity":1,"message":"195","line":26,"column":9,"nodeType":"185","messageId":"186","endLine":26,"endColumn":21},{"ruleId":"183","severity":1,"message":"196","line":3,"column":8,"nodeType":"185","messageId":"186","endLine":3,"endColumn":20},{"ruleId":"183","severity":1,"message":"197","line":11,"column":11,"nodeType":"185","messageId":"186","endLine":11,"endColumn":23},{"ruleId":"183","severity":1,"message":"198","line":3,"column":10,"nodeType":"185","messageId":"186","endLine":3,"endColumn":20},{"ruleId":"199","severity":1,"message":"200","line":34,"column":7,"nodeType":"185","messageId":"201","endLine":34,"endColumn":11},{"ruleId":"183","severity":1,"message":"202","line":2,"column":8,"nodeType":"185","messageId":"186","endLine":2,"endColumn":12},{"ruleId":"183","severity":1,"message":"202","line":2,"column":8,"nodeType":"185","messageId":"186","endLine":2,"endColumn":12},{"ruleId":"183","severity":1,"message":"198","line":3,"column":10,"nodeType":"185","messageId":"186","endLine":3,"endColumn":20},{"ruleId":"199","severity":1,"message":"200","line":52,"column":7,"nodeType":"185","messageId":"201","endLine":52,"endColumn":11},{"ruleId":"183","severity":1,"message":"198","line":3,"column":10,"nodeType":"185","messageId":"186","endLine":3,"endColumn":20},{"ruleId":"199","severity":1,"message":"200","line":36,"column":7,"nodeType":"185","messageId":"201","endLine":36,"endColumn":11},{"ruleId":"183","severity":1,"message":"198","line":3,"column":10,"nodeType":"185","messageId":"186","endLine":3,"endColumn":20},{"ruleId":"199","severity":1,"message":"200","line":36,"column":7,"nodeType":"185","messageId":"201","endLine":36,"endColumn":11},{"ruleId":"183","severity":1,"message":"197","line":7,"column":11,"nodeType":"185","messageId":"186","endLine":7,"endColumn":23},{"ruleId":"183","severity":1,"message":"203","line":7,"column":25,"nodeType":"185","messageId":"186","endLine":7,"endColumn":40},{"ruleId":"183","severity":1,"message":"204","line":5,"column":8,"nodeType":"185","messageId":"186","endLine":5,"endColumn":16},{"ruleId":"183","severity":1,"message":"189","line":9,"column":8,"nodeType":"185","messageId":"186","endLine":9,"endColumn":19},{"ruleId":"183","severity":1,"message":"190","line":11,"column":8,"nodeType":"185","messageId":"186","endLine":11,"endColumn":15},{"ruleId":"205","severity":1,"message":"206","line":14,"column":7,"nodeType":"207","endLine":14,"endColumn":56},"no-native-reassign",["208"],"no-negated-in-lhs",["209"],"no-unused-vars","'poster' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'Link' is defined but never used.","'Correlation' is defined but never used.","'HeatMap' is defined but never used.","'labelDS' is assigned a value but never used.","'setDS' is assigned a value but never used.","'datasetNames' is assigned a value but never used.","'display' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'StickyHeader' is defined but never used.","'loggedInUser' is assigned a value but never used.","'dataNonGeo' is defined but never used.","no-redeclare","'data' is already defined.","redeclared","'Plot' is defined but never used.","'setLoggedInUser' is assigned a value but never used.","'granular' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]